
clock_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a54  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000bec  08000bec  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000bec  08000bec  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000bec  08000bec  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bec  08000bec  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bec  08000bec  00010bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000bf0  08000bf0  00010bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000bf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000bf8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000bf8  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000fc0  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004bb  00000000  00000000  00021037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000140  00000000  00000000  000214f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d6  00000000  00000000  00021638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ed6e  00000000  00000000  0002170e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001cbe  00000000  00000000  0003047c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00053330  00000000  00000000  0003213a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000038c  00000000  00000000  0008546c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000857f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000bd4 	.word	0x08000bd4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000bd4 	.word	0x08000bd4

080001d8 <calculate_seconds_rem>:
 *                                              *
 * *********************************************/

#include "clock_handler.h"

int calculate_seconds_rem(int s) {
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
    //logic for remainder of seconds
    return ((int)(s % 60));
 80001e0:	687a      	ldr	r2, [r7, #4]
 80001e2:	4b09      	ldr	r3, [pc, #36]	; (8000208 <calculate_seconds_rem+0x30>)
 80001e4:	fb83 1302 	smull	r1, r3, r3, r2
 80001e8:	4413      	add	r3, r2
 80001ea:	1159      	asrs	r1, r3, #5
 80001ec:	17d3      	asrs	r3, r2, #31
 80001ee:	1ac9      	subs	r1, r1, r3
 80001f0:	460b      	mov	r3, r1
 80001f2:	011b      	lsls	r3, r3, #4
 80001f4:	1a5b      	subs	r3, r3, r1
 80001f6:	009b      	lsls	r3, r3, #2
 80001f8:	1ad1      	subs	r1, r2, r3
 80001fa:	460b      	mov	r3, r1
}
 80001fc:	4618      	mov	r0, r3
 80001fe:	370c      	adds	r7, #12
 8000200:	46bd      	mov	sp, r7
 8000202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000206:	4770      	bx	lr
 8000208:	88888889 	.word	0x88888889

0800020c <calculate_min>:

int calculate_min(int s) {
 800020c:	b480      	push	{r7}
 800020e:	b083      	sub	sp, #12
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
    //logic for calculating minutes
    return ((int)(s / 60) % 60);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	4a0d      	ldr	r2, [pc, #52]	; (800024c <calculate_min+0x40>)
 8000218:	fb82 1203 	smull	r1, r2, r2, r3
 800021c:	441a      	add	r2, r3
 800021e:	1152      	asrs	r2, r2, #5
 8000220:	17db      	asrs	r3, r3, #31
 8000222:	1ad2      	subs	r2, r2, r3
 8000224:	4b09      	ldr	r3, [pc, #36]	; (800024c <calculate_min+0x40>)
 8000226:	fb83 1302 	smull	r1, r3, r3, r2
 800022a:	4413      	add	r3, r2
 800022c:	1159      	asrs	r1, r3, #5
 800022e:	17d3      	asrs	r3, r2, #31
 8000230:	1ac9      	subs	r1, r1, r3
 8000232:	460b      	mov	r3, r1
 8000234:	011b      	lsls	r3, r3, #4
 8000236:	1a5b      	subs	r3, r3, r1
 8000238:	009b      	lsls	r3, r3, #2
 800023a:	1ad1      	subs	r1, r2, r3
 800023c:	460b      	mov	r3, r1
}
 800023e:	4618      	mov	r0, r3
 8000240:	370c      	adds	r7, #12
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	88888889 	.word	0x88888889

08000250 <calculate_hour>:

int calculate_hour(int s) {
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
    //logic for calculating hours
    return ((int)(s / 3600));
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a06      	ldr	r2, [pc, #24]	; (8000274 <calculate_hour+0x24>)
 800025c:	fb82 1203 	smull	r1, r2, r2, r3
 8000260:	441a      	add	r2, r3
 8000262:	12d2      	asrs	r2, r2, #11
 8000264:	17db      	asrs	r3, r3, #31
 8000266:	1ad3      	subs	r3, r2, r3
}
 8000268:	4618      	mov	r0, r3
 800026a:	370c      	adds	r7, #12
 800026c:	46bd      	mov	sp, r7
 800026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000272:	4770      	bx	lr
 8000274:	91a2b3c5 	.word	0x91a2b3c5

08000278 <main>:


volatile int seconds = 3600;

int main(void)
{
 8000278:	b5b0      	push	{r4, r5, r7, lr}
 800027a:	af00      	add	r7, sp, #0
    /*Initialize Modules*/
    uart1_tx_init();
 800027c:	f000 fbfc 	bl	8000a78 <uart1_tx_init>
    tim2_1hz_init();
 8000280:	f000 fbd4 	bl	8000a2c <tim2_1hz_init>
    shift_reg_init();
 8000284:	f000 f830 	bl	80002e8 <shift_reg_init>

    while(1)
    {
        /*Forever Loop*/
        while(!(TIM2->SR & SR_UIF)) {
 8000288:	e016      	b.n	80002b8 <main+0x40>
        	display_handler(calculate_hour(seconds), calculate_min(seconds), calculate_seconds_rem(seconds));
 800028a:	4b16      	ldr	r3, [pc, #88]	; (80002e4 <main+0x6c>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4618      	mov	r0, r3
 8000290:	f7ff ffde 	bl	8000250 <calculate_hour>
 8000294:	4604      	mov	r4, r0
 8000296:	4b13      	ldr	r3, [pc, #76]	; (80002e4 <main+0x6c>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4618      	mov	r0, r3
 800029c:	f7ff ffb6 	bl	800020c <calculate_min>
 80002a0:	4605      	mov	r5, r0
 80002a2:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <main+0x6c>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4618      	mov	r0, r3
 80002a8:	f7ff ff96 	bl	80001d8 <calculate_seconds_rem>
 80002ac:	4603      	mov	r3, r0
 80002ae:	461a      	mov	r2, r3
 80002b0:	4629      	mov	r1, r5
 80002b2:	4620      	mov	r0, r4
 80002b4:	f000 f832 	bl	800031c <display_handler>
        while(!(TIM2->SR & SR_UIF)) {
 80002b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002bc:	691b      	ldr	r3, [r3, #16]
 80002be:	f003 0301 	and.w	r3, r3, #1
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d0e1      	beq.n	800028a <main+0x12>
        }
        TIM2->SR &= ~SR_UIF;
 80002c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ca:	691b      	ldr	r3, [r3, #16]
 80002cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002d0:	f023 0301 	bic.w	r3, r3, #1
 80002d4:	6113      	str	r3, [r2, #16]

        seconds++;
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <main+0x6c>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	3301      	adds	r3, #1
 80002dc:	4a01      	ldr	r2, [pc, #4]	; (80002e4 <main+0x6c>)
 80002de:	6013      	str	r3, [r2, #0]
        while(!(TIM2->SR & SR_UIF)) {
 80002e0:	e7ea      	b.n	80002b8 <main+0x40>
 80002e2:	bf00      	nop
 80002e4:	20000000 	.word	0x20000000

080002e8 <shift_reg_init>:
#define D3                  3
#define D4                  4
#define D5                  5
#define D6                  6

void shift_reg_init() {
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
    // initialize GPIO pins
    RCC->AHB1ENR |= GPIOAEN;
 80002ec:	4b08      	ldr	r3, [pc, #32]	; (8000310 <shift_reg_init+0x28>)
 80002ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f0:	4a07      	ldr	r2, [pc, #28]	; (8000310 <shift_reg_init+0x28>)
 80002f2:	f043 0301 	orr.w	r3, r3, #1
 80002f6:	6313      	str	r3, [r2, #48]	; 0x30

    /* Enable output for PA0 - PA8 */
    GPIOA->MODER |= ( 1U<<16 | 1U<<14 | 1U<<12 | 1U<<10 | 1U<<8 | 1U<<6 | 1U<<4 | 1U<<2 | 1U<<0 );
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <shift_reg_init+0x2c>)
 80002fa:	681a      	ldr	r2, [r3, #0]
 80002fc:	4905      	ldr	r1, [pc, #20]	; (8000314 <shift_reg_init+0x2c>)
 80002fe:	4b06      	ldr	r3, [pc, #24]	; (8000318 <shift_reg_init+0x30>)
 8000300:	4313      	orrs	r3, r2
 8000302:	600b      	str	r3, [r1, #0]

}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40023800 	.word	0x40023800
 8000314:	40020000 	.word	0x40020000
 8000318:	00015555 	.word	0x00015555

0800031c <display_handler>:

void display_handler(int h, int m, int s) {
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
 8000322:	60f8      	str	r0, [r7, #12]
 8000324:	60b9      	str	r1, [r7, #8]
 8000326:	607a      	str	r2, [r7, #4]
    display_hours(h);
 8000328:	68f8      	ldr	r0, [r7, #12]
 800032a:	f000 f80b 	bl	8000344 <display_hours>
    display_minutes(m);
 800032e:	68b8      	ldr	r0, [r7, #8]
 8000330:	f000 f864 	bl	80003fc <display_minutes>
    display_seconds(s);
 8000334:	6878      	ldr	r0, [r7, #4]
 8000336:	f000 f8bd 	bl	80004b4 <display_seconds>
}
 800033a:	bf00      	nop
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
	...

08000344 <display_hours>:

void display_hours(int h) {
 8000344:	b580      	push	{r7, lr}
 8000346:	b094      	sub	sp, #80	; 0x50
 8000348:	af02      	add	r7, sp, #8
 800034a:	6078      	str	r0, [r7, #4]
    //  digit1 = h // 10
    //else
    //  digit1 = 0
    //digit2 = h % 10

	int bit_array[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
 800034c:	f107 0308 	add.w	r3, r7, #8
 8000350:	2240      	movs	r2, #64	; 0x40
 8000352:	2100      	movs	r1, #0
 8000354:	4618      	mov	r0, r3
 8000356:	f000 fc10 	bl	8000b7a <memset>
							0, 0, 0, 0, 0, 0, 0, 0};

	if (h > 9) {
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	2b09      	cmp	r3, #9
 800035e:	dd0e      	ble.n	800037e <display_hours+0x3a>
		set_time_array(&bit_array[8], (int)(h / 10));
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a25      	ldr	r2, [pc, #148]	; (80003f8 <display_hours+0xb4>)
 8000364:	fb82 1203 	smull	r1, r2, r2, r3
 8000368:	1092      	asrs	r2, r2, #2
 800036a:	17db      	asrs	r3, r3, #31
 800036c:	1ad2      	subs	r2, r2, r3
 800036e:	f107 0308 	add.w	r3, r7, #8
 8000372:	3320      	adds	r3, #32
 8000374:	4611      	mov	r1, r2
 8000376:	4618      	mov	r0, r3
 8000378:	f000 f8ea 	bl	8000550 <set_time_array>
 800037c:	e006      	b.n	800038c <display_hours+0x48>
	} else {
		set_time_array(&bit_array[8], 0);
 800037e:	f107 0308 	add.w	r3, r7, #8
 8000382:	3320      	adds	r3, #32
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f000 f8e2 	bl	8000550 <set_time_array>
	}

	set_digit_array(bit_array, D1);
 800038c:	f107 0308 	add.w	r3, r7, #8
 8000390:	2101      	movs	r1, #1
 8000392:	4618      	mov	r0, r3
 8000394:	f000 fa88 	bl	80008a8 <set_digit_array>
	send_bits(bit_array, THREE_DATA_ON, THREE_DATA_OFF, D1, 16);
 8000398:	f107 0008 	add.w	r0, r7, #8
 800039c:	2310      	movs	r3, #16
 800039e:	9300      	str	r3, [sp, #0]
 80003a0:	2301      	movs	r3, #1
 80003a2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80003a6:	2140      	movs	r1, #64	; 0x40
 80003a8:	f000 fabc 	bl	8000924 <send_bits>

	set_time_array(&bit_array[8], (h % 10));
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <display_hours+0xb4>)
 80003b0:	fb83 1302 	smull	r1, r3, r3, r2
 80003b4:	1099      	asrs	r1, r3, #2
 80003b6:	17d3      	asrs	r3, r2, #31
 80003b8:	1ac9      	subs	r1, r1, r3
 80003ba:	460b      	mov	r3, r1
 80003bc:	009b      	lsls	r3, r3, #2
 80003be:	440b      	add	r3, r1
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	1ad1      	subs	r1, r2, r3
 80003c4:	f107 0308 	add.w	r3, r7, #8
 80003c8:	3320      	adds	r3, #32
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 f8c0 	bl	8000550 <set_time_array>
	set_digit_array(bit_array, D2);
 80003d0:	f107 0308 	add.w	r3, r7, #8
 80003d4:	2102      	movs	r1, #2
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 fa66 	bl	80008a8 <set_digit_array>
	send_bits(bit_array, THREE_DATA_ON, THREE_DATA_OFF, D2, 16);
 80003dc:	f107 0008 	add.w	r0, r7, #8
 80003e0:	2310      	movs	r3, #16
 80003e2:	9300      	str	r3, [sp, #0]
 80003e4:	2302      	movs	r3, #2
 80003e6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80003ea:	2140      	movs	r1, #64	; 0x40
 80003ec:	f000 fa9a 	bl	8000924 <send_bits>
}
 80003f0:	bf00      	nop
 80003f2:	3748      	adds	r7, #72	; 0x48
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	66666667 	.word	0x66666667

080003fc <display_minutes>:

void display_minutes(int m) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b094      	sub	sp, #80	; 0x50
 8000400:	af02      	add	r7, sp, #8
 8000402:	6078      	str	r0, [r7, #4]
    //if m > 9
    //  digit3 = m // 10
    //else
    //  digit3 = 0
    //digit4 = m % 10
	int bit_array[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
 8000404:	f107 0308 	add.w	r3, r7, #8
 8000408:	2240      	movs	r2, #64	; 0x40
 800040a:	2100      	movs	r1, #0
 800040c:	4618      	mov	r0, r3
 800040e:	f000 fbb4 	bl	8000b7a <memset>
							0, 0, 0, 0, 0, 0, 0, 0};
	if (m > 9) {
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	2b09      	cmp	r3, #9
 8000416:	dd0e      	ble.n	8000436 <display_minutes+0x3a>
		set_time_array(&bit_array[8], (int)(m / 10));
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a25      	ldr	r2, [pc, #148]	; (80004b0 <display_minutes+0xb4>)
 800041c:	fb82 1203 	smull	r1, r2, r2, r3
 8000420:	1092      	asrs	r2, r2, #2
 8000422:	17db      	asrs	r3, r3, #31
 8000424:	1ad2      	subs	r2, r2, r3
 8000426:	f107 0308 	add.w	r3, r7, #8
 800042a:	3320      	adds	r3, #32
 800042c:	4611      	mov	r1, r2
 800042e:	4618      	mov	r0, r3
 8000430:	f000 f88e 	bl	8000550 <set_time_array>
 8000434:	e006      	b.n	8000444 <display_minutes+0x48>
	} else {
		set_time_array(&bit_array[8], 0);
 8000436:	f107 0308 	add.w	r3, r7, #8
 800043a:	3320      	adds	r3, #32
 800043c:	2100      	movs	r1, #0
 800043e:	4618      	mov	r0, r3
 8000440:	f000 f886 	bl	8000550 <set_time_array>
	}

	set_digit_array(bit_array, D3);
 8000444:	f107 0308 	add.w	r3, r7, #8
 8000448:	2103      	movs	r1, #3
 800044a:	4618      	mov	r0, r3
 800044c:	f000 fa2c 	bl	80008a8 <set_digit_array>
	send_bits(bit_array, THREE_DATA_ON, THREE_DATA_OFF, D3, 16);
 8000450:	f107 0008 	add.w	r0, r7, #8
 8000454:	2310      	movs	r3, #16
 8000456:	9300      	str	r3, [sp, #0]
 8000458:	2303      	movs	r3, #3
 800045a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800045e:	2140      	movs	r1, #64	; 0x40
 8000460:	f000 fa60 	bl	8000924 <send_bits>

	set_time_array(&bit_array[8], (m % 10));
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <display_minutes+0xb4>)
 8000468:	fb83 1302 	smull	r1, r3, r3, r2
 800046c:	1099      	asrs	r1, r3, #2
 800046e:	17d3      	asrs	r3, r2, #31
 8000470:	1ac9      	subs	r1, r1, r3
 8000472:	460b      	mov	r3, r1
 8000474:	009b      	lsls	r3, r3, #2
 8000476:	440b      	add	r3, r1
 8000478:	005b      	lsls	r3, r3, #1
 800047a:	1ad1      	subs	r1, r2, r3
 800047c:	f107 0308 	add.w	r3, r7, #8
 8000480:	3320      	adds	r3, #32
 8000482:	4618      	mov	r0, r3
 8000484:	f000 f864 	bl	8000550 <set_time_array>
	set_digit_array(bit_array, D4);
 8000488:	f107 0308 	add.w	r3, r7, #8
 800048c:	2104      	movs	r1, #4
 800048e:	4618      	mov	r0, r3
 8000490:	f000 fa0a 	bl	80008a8 <set_digit_array>
	send_bits(bit_array, THREE_DATA_ON, THREE_DATA_OFF, D4, 16);
 8000494:	f107 0008 	add.w	r0, r7, #8
 8000498:	2310      	movs	r3, #16
 800049a:	9300      	str	r3, [sp, #0]
 800049c:	2304      	movs	r3, #4
 800049e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80004a2:	2140      	movs	r1, #64	; 0x40
 80004a4:	f000 fa3e 	bl	8000924 <send_bits>
}
 80004a8:	bf00      	nop
 80004aa:	3748      	adds	r7, #72	; 0x48
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	66666667 	.word	0x66666667

080004b4 <display_seconds>:

void display_seconds(int s){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08c      	sub	sp, #48	; 0x30
 80004b8:	af02      	add	r7, sp, #8
 80004ba:	6078      	str	r0, [r7, #4]

	int bit_array[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 80004bc:	f107 0308 	add.w	r3, r7, #8
 80004c0:	2220      	movs	r2, #32
 80004c2:	2100      	movs	r1, #0
 80004c4:	4618      	mov	r0, r3
 80004c6:	f000 fb58 	bl	8000b7a <memset>


	/* CHECK FOR TENS PLACE DIGIT */
	if (s > 9) {
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	2b09      	cmp	r3, #9
 80004ce:	dd0d      	ble.n	80004ec <display_seconds+0x38>
		set_time_array(bit_array, ((int)(s / 10)));
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4a1e      	ldr	r2, [pc, #120]	; (800054c <display_seconds+0x98>)
 80004d4:	fb82 1203 	smull	r1, r2, r2, r3
 80004d8:	1092      	asrs	r2, r2, #2
 80004da:	17db      	asrs	r3, r3, #31
 80004dc:	1ad2      	subs	r2, r2, r3
 80004de:	f107 0308 	add.w	r3, r7, #8
 80004e2:	4611      	mov	r1, r2
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 f833 	bl	8000550 <set_time_array>
 80004ea:	e005      	b.n	80004f8 <display_seconds+0x44>
	} else {
		set_time_array(bit_array, 0);
 80004ec:	f107 0308 	add.w	r3, r7, #8
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 f82c 	bl	8000550 <set_time_array>
	}
	send_bits(bit_array, ONE_DATA_ON, ONE_DATA_OFF, D5, 8);
 80004f8:	f107 0008 	add.w	r0, r7, #8
 80004fc:	2308      	movs	r3, #8
 80004fe:	9300      	str	r3, [sp, #0]
 8000500:	2305      	movs	r3, #5
 8000502:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000506:	2101      	movs	r1, #1
 8000508:	f000 fa0c 	bl	8000924 <send_bits>

	/* SET FOR ONES PLACE DIGIT */
	set_time_array(bit_array, (s % 10));
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	4b0f      	ldr	r3, [pc, #60]	; (800054c <display_seconds+0x98>)
 8000510:	fb83 1302 	smull	r1, r3, r3, r2
 8000514:	1099      	asrs	r1, r3, #2
 8000516:	17d3      	asrs	r3, r2, #31
 8000518:	1ac9      	subs	r1, r1, r3
 800051a:	460b      	mov	r3, r1
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	440b      	add	r3, r1
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	1ad1      	subs	r1, r2, r3
 8000524:	f107 0308 	add.w	r3, r7, #8
 8000528:	4618      	mov	r0, r3
 800052a:	f000 f811 	bl	8000550 <set_time_array>
	send_bits(bit_array, TWO_DATA_ON, TWO_DATA_OFF, D6, 8);
 800052e:	f107 0008 	add.w	r0, r7, #8
 8000532:	2308      	movs	r3, #8
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	2306      	movs	r3, #6
 8000538:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800053c:	2108      	movs	r1, #8
 800053e:	f000 f9f1 	bl	8000924 <send_bits>

}
 8000542:	bf00      	nop
 8000544:	3728      	adds	r7, #40	; 0x28
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	66666667 	.word	0x66666667

08000550 <set_time_array>:

void set_time_array(int* p, int time) {
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]
    // sets bit_array for digit in switch statement, according
    // to 7 segment display segments.

	switch(time) {
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	2b09      	cmp	r3, #9
 800055e:	f200 819d 	bhi.w	800089c <set_time_array+0x34c>
 8000562:	a201      	add	r2, pc, #4	; (adr r2, 8000568 <set_time_array+0x18>)
 8000564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000568:	08000591 	.word	0x08000591
 800056c:	080005df 	.word	0x080005df
 8000570:	0800062d 	.word	0x0800062d
 8000574:	0800067b 	.word	0x0800067b
 8000578:	080006c9 	.word	0x080006c9
 800057c:	08000717 	.word	0x08000717
 8000580:	08000765 	.word	0x08000765
 8000584:	080007b3 	.word	0x080007b3
 8000588:	08000801 	.word	0x08000801
 800058c:	0800084f 	.word	0x0800084f
		case 0:
			*p++ = 1; *p++ = 1; *p++ = 1; *p++ = 1;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	1d1a      	adds	r2, r3, #4
 8000594:	607a      	str	r2, [r7, #4]
 8000596:	2201      	movs	r2, #1
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	1d1a      	adds	r2, r3, #4
 800059e:	607a      	str	r2, [r7, #4]
 80005a0:	2201      	movs	r2, #1
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	1d1a      	adds	r2, r3, #4
 80005a8:	607a      	str	r2, [r7, #4]
 80005aa:	2201      	movs	r2, #1
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	1d1a      	adds	r2, r3, #4
 80005b2:	607a      	str	r2, [r7, #4]
 80005b4:	2201      	movs	r2, #1
 80005b6:	601a      	str	r2, [r3, #0]
			*p++ = 1; *p++ = 1; *p++ = 0; *p = 0;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	1d1a      	adds	r2, r3, #4
 80005bc:	607a      	str	r2, [r7, #4]
 80005be:	2201      	movs	r2, #1
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	1d1a      	adds	r2, r3, #4
 80005c6:	607a      	str	r2, [r7, #4]
 80005c8:	2201      	movs	r2, #1
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	1d1a      	adds	r2, r3, #4
 80005d0:	607a      	str	r2, [r7, #4]
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
			break;
 80005dc:	e15e      	b.n	800089c <set_time_array+0x34c>
		case 1:
			*p++ = 0; *p++ = 1; *p++ = 1; *p++ = 0;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	1d1a      	adds	r2, r3, #4
 80005e2:	607a      	str	r2, [r7, #4]
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	1d1a      	adds	r2, r3, #4
 80005ec:	607a      	str	r2, [r7, #4]
 80005ee:	2201      	movs	r2, #1
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	1d1a      	adds	r2, r3, #4
 80005f6:	607a      	str	r2, [r7, #4]
 80005f8:	2201      	movs	r2, #1
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	1d1a      	adds	r2, r3, #4
 8000600:	607a      	str	r2, [r7, #4]
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
			*p++ = 0; *p++ = 0; *p++ = 0; *p = 0;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	1d1a      	adds	r2, r3, #4
 800060a:	607a      	str	r2, [r7, #4]
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	1d1a      	adds	r2, r3, #4
 8000614:	607a      	str	r2, [r7, #4]
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	1d1a      	adds	r2, r3, #4
 800061e:	607a      	str	r2, [r7, #4]
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
			break;
 800062a:	e137      	b.n	800089c <set_time_array+0x34c>
		case 2:
			*p++ = 1; *p++ = 1; *p++ = 0; *p++ = 1;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	1d1a      	adds	r2, r3, #4
 8000630:	607a      	str	r2, [r7, #4]
 8000632:	2201      	movs	r2, #1
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	1d1a      	adds	r2, r3, #4
 800063a:	607a      	str	r2, [r7, #4]
 800063c:	2201      	movs	r2, #1
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	1d1a      	adds	r2, r3, #4
 8000644:	607a      	str	r2, [r7, #4]
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	1d1a      	adds	r2, r3, #4
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	2201      	movs	r2, #1
 8000652:	601a      	str	r2, [r3, #0]
			*p++ = 1; *p++ = 0; *p++ = 1; *p = 0;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	1d1a      	adds	r2, r3, #4
 8000658:	607a      	str	r2, [r7, #4]
 800065a:	2201      	movs	r2, #1
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	1d1a      	adds	r2, r3, #4
 8000662:	607a      	str	r2, [r7, #4]
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	1d1a      	adds	r2, r3, #4
 800066c:	607a      	str	r2, [r7, #4]
 800066e:	2201      	movs	r2, #1
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
			break;
 8000678:	e110      	b.n	800089c <set_time_array+0x34c>
		case 3:
			*p++ = 1; *p++ = 1; *p++ = 1; *p++ = 1;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	1d1a      	adds	r2, r3, #4
 800067e:	607a      	str	r2, [r7, #4]
 8000680:	2201      	movs	r2, #1
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	1d1a      	adds	r2, r3, #4
 8000688:	607a      	str	r2, [r7, #4]
 800068a:	2201      	movs	r2, #1
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	1d1a      	adds	r2, r3, #4
 8000692:	607a      	str	r2, [r7, #4]
 8000694:	2201      	movs	r2, #1
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	1d1a      	adds	r2, r3, #4
 800069c:	607a      	str	r2, [r7, #4]
 800069e:	2201      	movs	r2, #1
 80006a0:	601a      	str	r2, [r3, #0]
			*p++ = 0; *p++ = 0; *p++ = 1; *p = 0;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	1d1a      	adds	r2, r3, #4
 80006a6:	607a      	str	r2, [r7, #4]
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	1d1a      	adds	r2, r3, #4
 80006b0:	607a      	str	r2, [r7, #4]
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	1d1a      	adds	r2, r3, #4
 80006ba:	607a      	str	r2, [r7, #4]
 80006bc:	2201      	movs	r2, #1
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
			break;
 80006c6:	e0e9      	b.n	800089c <set_time_array+0x34c>
		case 4:
			*p++ = 0; *p++ = 1; *p++ = 1; *p++ = 0;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	1d1a      	adds	r2, r3, #4
 80006cc:	607a      	str	r2, [r7, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	1d1a      	adds	r2, r3, #4
 80006d6:	607a      	str	r2, [r7, #4]
 80006d8:	2201      	movs	r2, #1
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	1d1a      	adds	r2, r3, #4
 80006e0:	607a      	str	r2, [r7, #4]
 80006e2:	2201      	movs	r2, #1
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	1d1a      	adds	r2, r3, #4
 80006ea:	607a      	str	r2, [r7, #4]
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
			*p++ = 0; *p++ = 1; *p++ = 1; *p = 0;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	1d1a      	adds	r2, r3, #4
 80006f4:	607a      	str	r2, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	1d1a      	adds	r2, r3, #4
 80006fe:	607a      	str	r2, [r7, #4]
 8000700:	2201      	movs	r2, #1
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	1d1a      	adds	r2, r3, #4
 8000708:	607a      	str	r2, [r7, #4]
 800070a:	2201      	movs	r2, #1
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
			break;
 8000714:	e0c2      	b.n	800089c <set_time_array+0x34c>
		case 5:
			*p++ = 1; *p++ = 0; *p++ = 1; *p++ = 1;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	1d1a      	adds	r2, r3, #4
 800071a:	607a      	str	r2, [r7, #4]
 800071c:	2201      	movs	r2, #1
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	1d1a      	adds	r2, r3, #4
 8000724:	607a      	str	r2, [r7, #4]
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	1d1a      	adds	r2, r3, #4
 800072e:	607a      	str	r2, [r7, #4]
 8000730:	2201      	movs	r2, #1
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	1d1a      	adds	r2, r3, #4
 8000738:	607a      	str	r2, [r7, #4]
 800073a:	2201      	movs	r2, #1
 800073c:	601a      	str	r2, [r3, #0]
			*p++ = 0; *p++ = 1; *p++ = 1; *p = 0;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	1d1a      	adds	r2, r3, #4
 8000742:	607a      	str	r2, [r7, #4]
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	1d1a      	adds	r2, r3, #4
 800074c:	607a      	str	r2, [r7, #4]
 800074e:	2201      	movs	r2, #1
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	1d1a      	adds	r2, r3, #4
 8000756:	607a      	str	r2, [r7, #4]
 8000758:	2201      	movs	r2, #1
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
			break;
 8000762:	e09b      	b.n	800089c <set_time_array+0x34c>
		case 6:
			*p++ = 1; *p++ = 0; *p++ = 1; *p++ = 1;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	1d1a      	adds	r2, r3, #4
 8000768:	607a      	str	r2, [r7, #4]
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	1d1a      	adds	r2, r3, #4
 8000772:	607a      	str	r2, [r7, #4]
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	1d1a      	adds	r2, r3, #4
 800077c:	607a      	str	r2, [r7, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	1d1a      	adds	r2, r3, #4
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	2201      	movs	r2, #1
 800078a:	601a      	str	r2, [r3, #0]
			*p++ = 1; *p++ = 1; *p++ = 1; *p = 0;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	1d1a      	adds	r2, r3, #4
 8000790:	607a      	str	r2, [r7, #4]
 8000792:	2201      	movs	r2, #1
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	1d1a      	adds	r2, r3, #4
 800079a:	607a      	str	r2, [r7, #4]
 800079c:	2201      	movs	r2, #1
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	1d1a      	adds	r2, r3, #4
 80007a4:	607a      	str	r2, [r7, #4]
 80007a6:	2201      	movs	r2, #1
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
			break;
 80007b0:	e074      	b.n	800089c <set_time_array+0x34c>
		case 7:
			*p++ = 1; *p++ = 1; *p++ = 1; *p++ = 0;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	1d1a      	adds	r2, r3, #4
 80007b6:	607a      	str	r2, [r7, #4]
 80007b8:	2201      	movs	r2, #1
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	1d1a      	adds	r2, r3, #4
 80007c0:	607a      	str	r2, [r7, #4]
 80007c2:	2201      	movs	r2, #1
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	1d1a      	adds	r2, r3, #4
 80007ca:	607a      	str	r2, [r7, #4]
 80007cc:	2201      	movs	r2, #1
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	1d1a      	adds	r2, r3, #4
 80007d4:	607a      	str	r2, [r7, #4]
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
			*p++ = 0; *p++ = 0; *p++ = 0; *p = 0;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	1d1a      	adds	r2, r3, #4
 80007de:	607a      	str	r2, [r7, #4]
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	1d1a      	adds	r2, r3, #4
 80007e8:	607a      	str	r2, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	1d1a      	adds	r2, r3, #4
 80007f2:	607a      	str	r2, [r7, #4]
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
			break;
 80007fe:	e04d      	b.n	800089c <set_time_array+0x34c>
		case 8:
			*p++ = 1; *p++ = 1; *p++ = 1; *p++ = 1;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	1d1a      	adds	r2, r3, #4
 8000804:	607a      	str	r2, [r7, #4]
 8000806:	2201      	movs	r2, #1
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	1d1a      	adds	r2, r3, #4
 800080e:	607a      	str	r2, [r7, #4]
 8000810:	2201      	movs	r2, #1
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	1d1a      	adds	r2, r3, #4
 8000818:	607a      	str	r2, [r7, #4]
 800081a:	2201      	movs	r2, #1
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	1d1a      	adds	r2, r3, #4
 8000822:	607a      	str	r2, [r7, #4]
 8000824:	2201      	movs	r2, #1
 8000826:	601a      	str	r2, [r3, #0]
			*p++ = 1; *p++ = 1; *p++ = 1; *p = 0;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	1d1a      	adds	r2, r3, #4
 800082c:	607a      	str	r2, [r7, #4]
 800082e:	2201      	movs	r2, #1
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	1d1a      	adds	r2, r3, #4
 8000836:	607a      	str	r2, [r7, #4]
 8000838:	2201      	movs	r2, #1
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	1d1a      	adds	r2, r3, #4
 8000840:	607a      	str	r2, [r7, #4]
 8000842:	2201      	movs	r2, #1
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
			break;
 800084c:	e026      	b.n	800089c <set_time_array+0x34c>
		case 9:
			*p++ = 1; *p++ = 1; *p++ = 1; *p++ = 0;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	1d1a      	adds	r2, r3, #4
 8000852:	607a      	str	r2, [r7, #4]
 8000854:	2201      	movs	r2, #1
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	1d1a      	adds	r2, r3, #4
 800085c:	607a      	str	r2, [r7, #4]
 800085e:	2201      	movs	r2, #1
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	1d1a      	adds	r2, r3, #4
 8000866:	607a      	str	r2, [r7, #4]
 8000868:	2201      	movs	r2, #1
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	1d1a      	adds	r2, r3, #4
 8000870:	607a      	str	r2, [r7, #4]
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
			*p++ = 0; *p++ = 1; *p++ = 1; *p = 0;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	1d1a      	adds	r2, r3, #4
 800087a:	607a      	str	r2, [r7, #4]
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	1d1a      	adds	r2, r3, #4
 8000884:	607a      	str	r2, [r7, #4]
 8000886:	2201      	movs	r2, #1
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	1d1a      	adds	r2, r3, #4
 800088e:	607a      	str	r2, [r7, #4]
 8000890:	2201      	movs	r2, #1
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
			break;
 800089a:	bf00      	nop
		}
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <set_digit_array>:

void set_digit_array(int* p, int digit) {
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 8; i++){
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	e008      	b.n	80008ca <set_digit_array+0x22>
		p[i] = 1;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	4413      	add	r3, r2
 80008c0:	2201      	movs	r2, #1
 80008c2:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 8; i++){
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	3301      	adds	r3, #1
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	2b07      	cmp	r3, #7
 80008ce:	ddf3      	ble.n	80008b8 <set_digit_array+0x10>
	}
	switch(digit){
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	d81e      	bhi.n	8000916 <set_digit_array+0x6e>
 80008d8:	a201      	add	r2, pc, #4	; (adr r2, 80008e0 <set_digit_array+0x38>)
 80008da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008de:	bf00      	nop
 80008e0:	080008f1 	.word	0x080008f1
 80008e4:	080008f9 	.word	0x080008f9
 80008e8:	08000903 	.word	0x08000903
 80008ec:	0800090d 	.word	0x0800090d
	case D1:
		p[0] = 0;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
		break;
 80008f6:	e00e      	b.n	8000916 <set_digit_array+0x6e>
	case D2:
		p[2] = 0;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3308      	adds	r3, #8
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
		break;
 8000900:	e009      	b.n	8000916 <set_digit_array+0x6e>
	case D3:
		p[4] = 0;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3310      	adds	r3, #16
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
		break;
 800090a:	e004      	b.n	8000916 <set_digit_array+0x6e>
	case D4:
		p[6] = 0;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3318      	adds	r3, #24
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
		break;
 8000914:	bf00      	nop
	}
}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop

08000924 <send_bits>:

void send_bits(int bit_array[], uint32_t DATA_PIN_ON, uint32_t DATA_PIN_OFF, int digit, int length) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
 8000930:	603b      	str	r3, [r7, #0]
    for(int i = length - 1; i >= 0; i--) {
 8000932:	6a3b      	ldr	r3, [r7, #32]
 8000934:	3b01      	subs	r3, #1
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	e013      	b.n	8000962 <send_bits+0x3e>
        //loop through and set pin data
        if (bit_array[i] == 1) {
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	4413      	add	r3, r2
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d103      	bne.n	8000950 <send_bits+0x2c>

        	GPIOA->BSRR = DATA_PIN_ON;
 8000948:	4a0b      	ldr	r2, [pc, #44]	; (8000978 <send_bits+0x54>)
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	6193      	str	r3, [r2, #24]
 800094e:	e002      	b.n	8000956 <send_bits+0x32>

        } else {

        	GPIOA->BSRR = DATA_PIN_OFF;
 8000950:	4a09      	ldr	r2, [pc, #36]	; (8000978 <send_bits+0x54>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6193      	str	r3, [r2, #24]

        }
        //pulse clock
        pulse_clock(digit);
 8000956:	6838      	ldr	r0, [r7, #0]
 8000958:	f000 f810 	bl	800097c <pulse_clock>
    for(int i = length - 1; i >= 0; i--) {
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	3b01      	subs	r3, #1
 8000960:	617b      	str	r3, [r7, #20]
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	2b00      	cmp	r3, #0
 8000966:	dae8      	bge.n	800093a <send_bits+0x16>
    }
    //pulse latch to catch
    pulse_latch(digit);
 8000968:	6838      	ldr	r0, [r7, #0]
 800096a:	f000 f833 	bl	80009d4 <pulse_latch>
}
 800096e:	bf00      	nop
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40020000 	.word	0x40020000

0800097c <pulse_clock>:

void pulse_clock(int digit) {
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
    // clock on / clock off
    switch(digit) {
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2b05      	cmp	r3, #5
 8000988:	d003      	beq.n	8000992 <pulse_clock+0x16>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b06      	cmp	r3, #6
 800098e:	d008      	beq.n	80009a2 <pulse_clock+0x26>
 8000990:	e00f      	b.n	80009b2 <pulse_clock+0x36>
		case D5: // seconds D5
			GPIOA->BSRR = ONE_CLOCK_ON;
 8000992:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <pulse_clock+0x54>)
 8000994:	2202      	movs	r2, #2
 8000996:	619a      	str	r2, [r3, #24]
			GPIOA->BSRR = ONE_CLOCK_OFF;
 8000998:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <pulse_clock+0x54>)
 800099a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800099e:	619a      	str	r2, [r3, #24]
			break;
 80009a0:	e00f      	b.n	80009c2 <pulse_clock+0x46>
        case D6: // seconds D6
	    	GPIOA->BSRR = TWO_CLOCK_ON;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <pulse_clock+0x54>)
 80009a4:	2210      	movs	r2, #16
 80009a6:	619a      	str	r2, [r3, #24]
	    	GPIOA->BSRR = TWO_CLOCK_OFF; 
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <pulse_clock+0x54>)
 80009aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80009ae:	619a      	str	r2, [r3, #24]
            break;
 80009b0:	e007      	b.n	80009c2 <pulse_clock+0x46>
        default: // hour - minute case
            GPIOA->BSRR = THREE_CLOCK_ON;
 80009b2:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <pulse_clock+0x54>)
 80009b4:	2280      	movs	r2, #128	; 0x80
 80009b6:	619a      	str	r2, [r3, #24]
            GPIOA->BSRR = THREE_CLOCK_OFF;
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <pulse_clock+0x54>)
 80009ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009be:	619a      	str	r2, [r3, #24]
    }
}
 80009c0:	bf00      	nop
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40020000 	.word	0x40020000

080009d4 <pulse_latch>:

void pulse_latch(int digit) {
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
    // latch on / latch off
    switch(digit) {
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b05      	cmp	r3, #5
 80009e0:	d003      	beq.n	80009ea <pulse_latch+0x16>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b06      	cmp	r3, #6
 80009e6:	d008      	beq.n	80009fa <pulse_latch+0x26>
 80009e8:	e00f      	b.n	8000a0a <pulse_latch+0x36>
    	case D5: // seconds D5
    		GPIOA->BSRR = ONE_LATCH_ON;
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <pulse_latch+0x54>)
 80009ec:	2204      	movs	r2, #4
 80009ee:	619a      	str	r2, [r3, #24]
    		GPIOA->BSRR = ONE_LATCH_OFF;
 80009f0:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <pulse_latch+0x54>)
 80009f2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80009f6:	619a      	str	r2, [r3, #24]
    		break;
 80009f8:	e010      	b.n	8000a1c <pulse_latch+0x48>
        case D6: // seconds D6
	    	GPIOA->BSRR = TWO_LATCH_ON;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <pulse_latch+0x54>)
 80009fc:	2220      	movs	r2, #32
 80009fe:	619a      	str	r2, [r3, #24]
	    	GPIOA->BSRR = TWO_LATCH_OFF; 
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <pulse_latch+0x54>)
 8000a02:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a06:	619a      	str	r2, [r3, #24]
            break;
 8000a08:	e008      	b.n	8000a1c <pulse_latch+0x48>
        default: // hour - minute case
            GPIOA->BSRR = THREE_LATCH_ON;
 8000a0a:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <pulse_latch+0x54>)
 8000a0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a10:	619a      	str	r2, [r3, #24]
            GPIOA->BSRR = THREE_LATCH_OFF;
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <pulse_latch+0x54>)
 8000a14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a18:	619a      	str	r2, [r3, #24]
    }
}
 8000a1a:	bf00      	nop
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	40020000 	.word	0x40020000

08000a2c <tim2_1hz_init>:
           
#define TIM2EN              (1U<<0) // APB1ENR
#define CR1_CEN             (1U<<0)

void tim2_1hz_init()
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
    /*****Configure Timer to 1 Hz*****/
    RCC->APB1ENR |= TIM2EN;
 8000a30:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <tim2_1hz_init+0x48>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	4a0f      	ldr	r2, [pc, #60]	; (8000a74 <tim2_1hz_init+0x48>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	6413      	str	r3, [r2, #64]	; 0x40
    TIM2->PSC = 1600 - 1;
 8000a3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a40:	f240 623f 	movw	r2, #1599	; 0x63f
 8000a44:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 10000 - 1;
 8000a46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a4a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a4e:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CNT = 0;
 8000a50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a54:	2200      	movs	r2, #0
 8000a56:	625a      	str	r2, [r3, #36]	; 0x24
    TIM2->CR1 |= CR1_CEN;
 8000a58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6013      	str	r3, [r2, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800

08000a78 <uart1_tx_init>:
/* Function Declerations */
void uart1_set_brr(uint32_t periphClk, uint32_t baud);
void uart1_write(int ch);

void uart1_tx_init()
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
    /***** Configure GPIOA PIN9 *****/
    RCC->AHB1ENR |= GPIOAEN;
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <uart1_tx_init+0x68>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a80:	4a17      	ldr	r2, [pc, #92]	; (8000ae0 <uart1_tx_init+0x68>)
 8000a82:	f043 0301 	orr.w	r3, r3, #1
 8000a86:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOA->MODER |= PIN9_MODE;
 8000a88:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <uart1_tx_init+0x6c>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a15      	ldr	r2, [pc, #84]	; (8000ae4 <uart1_tx_init+0x6c>)
 8000a8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a92:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] |= UART_AF;
 8000a94:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <uart1_tx_init+0x6c>)
 8000a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a98:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <uart1_tx_init+0x6c>)
 8000a9a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000a9e:	6253      	str	r3, [r2, #36]	; 0x24

    /***** Configure USART1 *****/
    RCC->APB2ENR |= USART1EN;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <uart1_tx_init+0x68>)
 8000aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa4:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <uart1_tx_init+0x68>)
 8000aa6:	f043 0310 	orr.w	r3, r3, #16
 8000aaa:	6453      	str	r3, [r2, #68]	; 0x44
    USART1->CR1 &= ~CR1_UE; // disable usart 
 8000aac:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <uart1_tx_init+0x70>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <uart1_tx_init+0x70>)
 8000ab2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ab6:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= CR1_TE; // enable TX
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <uart1_tx_init+0x70>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <uart1_tx_init+0x70>)
 8000abe:	f043 0308 	orr.w	r3, r3, #8
 8000ac2:	60d3      	str	r3, [r2, #12]
    uart1_set_brr(APB2CLK, BAUDRATE);
 8000ac4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000ac8:	4808      	ldr	r0, [pc, #32]	; (8000aec <uart1_tx_init+0x74>)
 8000aca:	f000 f811 	bl	8000af0 <uart1_set_brr>
    USART1->CR1 |= CR1_UE;
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <uart1_tx_init+0x70>)
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <uart1_tx_init+0x70>)
 8000ad4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ad8:	60d3      	str	r3, [r2, #12]
    
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020000 	.word	0x40020000
 8000ae8:	40011000 	.word	0x40011000
 8000aec:	00f42400 	.word	0x00f42400

08000af0 <uart1_set_brr>:
    uart1_write(ch);
    return ch;
}

void uart1_set_brr(uint32_t periphClk, uint32_t baud)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
    uint16_t uartdiv = periphClk / baud;
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b02:	81fb      	strh	r3, [r7, #14]
    USART1->BRR = (((uartdiv / 16) << 4) | (uartdiv % 16));
 8000b04:	89fb      	ldrh	r3, [r7, #14]
 8000b06:	091b      	lsrs	r3, r3, #4
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	011a      	lsls	r2, r3, #4
 8000b0c:	89fb      	ldrh	r3, [r7, #14]
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	431a      	orrs	r2, r3
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <uart1_set_brr+0x34>)
 8000b16:	609a      	str	r2, [r3, #8]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	40011000 	.word	0x40011000

08000b28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b28:	480d      	ldr	r0, [pc, #52]	; (8000b60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b2a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b2c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b30:	480c      	ldr	r0, [pc, #48]	; (8000b64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b32:	490d      	ldr	r1, [pc, #52]	; (8000b68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b34:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <LoopForever+0xe>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b38:	e002      	b.n	8000b40 <LoopCopyDataInit>

08000b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3e:	3304      	adds	r3, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b44:	d3f9      	bcc.n	8000b3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b46:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b48:	4c0a      	ldr	r4, [pc, #40]	; (8000b74 <LoopForever+0x16>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b4c:	e001      	b.n	8000b52 <LoopFillZerobss>

08000b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b50:	3204      	adds	r2, #4

08000b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b54:	d3fb      	bcc.n	8000b4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b56:	f000 f819 	bl	8000b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b5a:	f7ff fb8d 	bl	8000278 <main>

08000b5e <LoopForever>:

LoopForever:
  b LoopForever
 8000b5e:	e7fe      	b.n	8000b5e <LoopForever>
  ldr   r0, =_estack
 8000b60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b68:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000b6c:	08000bf4 	.word	0x08000bf4
  ldr r2, =_sbss
 8000b70:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000b74:	20000020 	.word	0x20000020

08000b78 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC_IRQHandler>

08000b7a <memset>:
 8000b7a:	4402      	add	r2, r0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d100      	bne.n	8000b84 <memset+0xa>
 8000b82:	4770      	bx	lr
 8000b84:	f803 1b01 	strb.w	r1, [r3], #1
 8000b88:	e7f9      	b.n	8000b7e <memset+0x4>
	...

08000b8c <__libc_init_array>:
 8000b8c:	b570      	push	{r4, r5, r6, lr}
 8000b8e:	4d0d      	ldr	r5, [pc, #52]	; (8000bc4 <__libc_init_array+0x38>)
 8000b90:	4c0d      	ldr	r4, [pc, #52]	; (8000bc8 <__libc_init_array+0x3c>)
 8000b92:	1b64      	subs	r4, r4, r5
 8000b94:	10a4      	asrs	r4, r4, #2
 8000b96:	2600      	movs	r6, #0
 8000b98:	42a6      	cmp	r6, r4
 8000b9a:	d109      	bne.n	8000bb0 <__libc_init_array+0x24>
 8000b9c:	4d0b      	ldr	r5, [pc, #44]	; (8000bcc <__libc_init_array+0x40>)
 8000b9e:	4c0c      	ldr	r4, [pc, #48]	; (8000bd0 <__libc_init_array+0x44>)
 8000ba0:	f000 f818 	bl	8000bd4 <_init>
 8000ba4:	1b64      	subs	r4, r4, r5
 8000ba6:	10a4      	asrs	r4, r4, #2
 8000ba8:	2600      	movs	r6, #0
 8000baa:	42a6      	cmp	r6, r4
 8000bac:	d105      	bne.n	8000bba <__libc_init_array+0x2e>
 8000bae:	bd70      	pop	{r4, r5, r6, pc}
 8000bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bb4:	4798      	blx	r3
 8000bb6:	3601      	adds	r6, #1
 8000bb8:	e7ee      	b.n	8000b98 <__libc_init_array+0xc>
 8000bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bbe:	4798      	blx	r3
 8000bc0:	3601      	adds	r6, #1
 8000bc2:	e7f2      	b.n	8000baa <__libc_init_array+0x1e>
 8000bc4:	08000bec 	.word	0x08000bec
 8000bc8:	08000bec 	.word	0x08000bec
 8000bcc:	08000bec 	.word	0x08000bec
 8000bd0:	08000bf0 	.word	0x08000bf0

08000bd4 <_init>:
 8000bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bd6:	bf00      	nop
 8000bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bda:	bc08      	pop	{r3}
 8000bdc:	469e      	mov	lr, r3
 8000bde:	4770      	bx	lr

08000be0 <_fini>:
 8000be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000be2:	bf00      	nop
 8000be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000be6:	bc08      	pop	{r3}
 8000be8:	469e      	mov	lr, r3
 8000bea:	4770      	bx	lr
