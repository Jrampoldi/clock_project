
clock_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001a48  08001a48  00011a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a84  08001a84  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001a84  08001a84  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a84  08001a84  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a84  08001a84  00011a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a88  08001a88  00011a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  08001ae8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08001ae8  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000016cb  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000754  00000000  00000000  0002179a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e8  00000000  00000000  00021ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000148  00000000  00000000  000220d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fe36  00000000  00000000  00022220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002963  00000000  00000000  00032056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000552ee  00000000  00000000  000349b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000d68  00000000  00000000  00089ca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0008aa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001a30 	.word	0x08001a30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08001a30 	.word	0x08001a30

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <calculate_seconds_rem>:
 * *********************************************/

#include "clock_handler.h"

int calculate_seconds_rem(int s)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    //logic for remainder of seconds
    return ((int)(s % 60));
 8000288:	687a      	ldr	r2, [r7, #4]
 800028a:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <calculate_seconds_rem+0x30>)
 800028c:	fb83 1302 	smull	r1, r3, r3, r2
 8000290:	4413      	add	r3, r2
 8000292:	1159      	asrs	r1, r3, #5
 8000294:	17d3      	asrs	r3, r2, #31
 8000296:	1ac9      	subs	r1, r1, r3
 8000298:	460b      	mov	r3, r1
 800029a:	011b      	lsls	r3, r3, #4
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	009b      	lsls	r3, r3, #2
 80002a0:	1ad1      	subs	r1, r2, r3
 80002a2:	460b      	mov	r3, r1
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	370c      	adds	r7, #12
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr
 80002b0:	88888889 	.word	0x88888889

080002b4 <calculate_min>:

int calculate_min(int s)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
    //logic for calculating minutes
    return ((int)(s / 60) % 60);
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	4a0d      	ldr	r2, [pc, #52]	; (80002f4 <calculate_min+0x40>)
 80002c0:	fb82 1203 	smull	r1, r2, r2, r3
 80002c4:	441a      	add	r2, r3
 80002c6:	1152      	asrs	r2, r2, #5
 80002c8:	17db      	asrs	r3, r3, #31
 80002ca:	1ad2      	subs	r2, r2, r3
 80002cc:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <calculate_min+0x40>)
 80002ce:	fb83 1302 	smull	r1, r3, r3, r2
 80002d2:	4413      	add	r3, r2
 80002d4:	1159      	asrs	r1, r3, #5
 80002d6:	17d3      	asrs	r3, r2, #31
 80002d8:	1ac9      	subs	r1, r1, r3
 80002da:	460b      	mov	r3, r1
 80002dc:	011b      	lsls	r3, r3, #4
 80002de:	1a5b      	subs	r3, r3, r1
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	1ad1      	subs	r1, r2, r3
 80002e4:	460b      	mov	r3, r1
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	88888889 	.word	0x88888889

080002f8 <main>:


int seconds = 0;

int main()
{
 80002f8:	b598      	push	{r3, r4, r7, lr}
 80002fa:	af00      	add	r7, sp, #0
    /*Initialize Modules*/
    uart1_tx_init();
 80002fc:	f000 fbc0 	bl	8000a80 <uart1_tx_init>
    tim2_1hz_init();
 8000300:	f000 fb98 	bl	8000a34 <tim2_1hz_init>
    shift_reg_init();
 8000304:	f000 f84a 	bl	800039c <shift_reg_init>

    while (1)
    {
        /*Forever Loop*/
        while(!(TIM2->SR & SR_UIF)){}
 8000308:	bf00      	nop
 800030a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800030e:	691b      	ldr	r3, [r3, #16]
 8000310:	f003 0301 	and.w	r3, r3, #1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d0f8      	beq.n	800030a <main+0x12>
        TIM2->SR &= ~SR_UIF;
 8000318:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800031c:	691b      	ldr	r3, [r3, #16]
 800031e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000322:	f023 0301 	bic.w	r3, r3, #1
 8000326:	6113      	str	r3, [r2, #16]
        
        seconds++;
 8000328:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <main+0x5c>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	3301      	adds	r3, #1
 800032e:	4a09      	ldr	r2, [pc, #36]	; (8000354 <main+0x5c>)
 8000330:	6013      	str	r3, [r2, #0]
        display_handler(calculate_min(seconds), calculate_seconds_rem(seconds));
 8000332:	4b08      	ldr	r3, [pc, #32]	; (8000354 <main+0x5c>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4618      	mov	r0, r3
 8000338:	f7ff ffbc 	bl	80002b4 <calculate_min>
 800033c:	4604      	mov	r4, r0
 800033e:	4b05      	ldr	r3, [pc, #20]	; (8000354 <main+0x5c>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ff9c 	bl	8000280 <calculate_seconds_rem>
 8000348:	4603      	mov	r3, r0
 800034a:	4619      	mov	r1, r3
 800034c:	4620      	mov	r0, r4
 800034e:	f000 f843 	bl	80003d8 <display_handler>
        while(!(TIM2->SR & SR_UIF)){}
 8000352:	e7d9      	b.n	8000308 <main+0x10>
 8000354:	20000078 	.word	0x20000078

08000358 <print_bits>:

// Probably should try to use timer interrupts to 
// program all of these. 

void print_bits(int bit_array[])
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < 8; i++)
 8000360:	2300      	movs	r3, #0
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	e00b      	b.n	800037e <print_bits+0x26>
    {
        printf("%d", bit_array[i]);
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	009b      	lsls	r3, r3, #2
 800036a:	687a      	ldr	r2, [r7, #4]
 800036c:	4413      	add	r3, r2
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4619      	mov	r1, r3
 8000372:	4808      	ldr	r0, [pc, #32]	; (8000394 <print_bits+0x3c>)
 8000374:	f000 fd96 	bl	8000ea4 <iprintf>
    for(int i = 0; i < 8; i++)
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	3301      	adds	r3, #1
 800037c:	60fb      	str	r3, [r7, #12]
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	2b07      	cmp	r3, #7
 8000382:	ddf0      	ble.n	8000366 <print_bits+0xe>
    }
    printf("\n\r");
 8000384:	4804      	ldr	r0, [pc, #16]	; (8000398 <print_bits+0x40>)
 8000386:	f000 fd8d 	bl	8000ea4 <iprintf>
}
 800038a:	bf00      	nop
 800038c:	3710      	adds	r7, #16
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	08001a48 	.word	0x08001a48
 8000398:	08001a4c 	.word	0x08001a4c

0800039c <shift_reg_init>:

void shift_reg_init()
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
    // initialize GPIO pins
    RCC->AHB1ENR |= GPIOAEN;
 80003a0:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <shift_reg_init+0x2c>)
 80003a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a4:	4a08      	ldr	r2, [pc, #32]	; (80003c8 <shift_reg_init+0x2c>)
 80003a6:	f043 0301 	orr.w	r3, r3, #1
 80003aa:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOA->MODER |= (1U<<24 | 1U<<22 | 1U<<14 | 
 80003ac:	4b07      	ldr	r3, [pc, #28]	; (80003cc <shift_reg_init+0x30>)
 80003ae:	681a      	ldr	r2, [r3, #0]
 80003b0:	4906      	ldr	r1, [pc, #24]	; (80003cc <shift_reg_init+0x30>)
 80003b2:	4b07      	ldr	r3, [pc, #28]	; (80003d0 <shift_reg_init+0x34>)
 80003b4:	4313      	orrs	r3, r2
 80003b6:	600b      	str	r3, [r1, #0]
                    1U<<12 | 1U<<10 | 1U<<8 | 
                    1U<<6 | 1U<<4 | 1U<<2); 
    GPIOA->BSRR = (ENABLE_PIN | SR_CLR); 
 80003b8:	4b04      	ldr	r3, [pc, #16]	; (80003cc <shift_reg_init+0x30>)
 80003ba:	4a06      	ldr	r2, [pc, #24]	; (80003d4 <shift_reg_init+0x38>)
 80003bc:	619a      	str	r2, [r3, #24]
    //sn74hc595n
}
 80003be:	bf00      	nop
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr
 80003c8:	40023800 	.word	0x40023800
 80003cc:	40020000 	.word	0x40020000
 80003d0:	01405554 	.word	0x01405554
 80003d4:	00801000 	.word	0x00801000

080003d8 <display_handler>:
void display_handler(int m, int s)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b08a      	sub	sp, #40	; 0x28
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	6039      	str	r1, [r7, #0]
    int bit_array[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 80003e2:	f107 0308 	add.w	r3, r7, #8
 80003e6:	2220      	movs	r2, #32
 80003e8:	2100      	movs	r1, #0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 fd6c 	bl	8000ec8 <memset>
    
    // Program Digit1
    GPIOA->BSRR = DIGIT_ONE;
 80003f0:	4b39      	ldr	r3, [pc, #228]	; (80004d8 <display_handler+0x100>)
 80003f2:	4a3a      	ldr	r2, [pc, #232]	; (80004dc <display_handler+0x104>)
 80003f4:	619a      	str	r2, [r3, #24]
    set_bit_array(bit_array, ((int)(m / 10)));
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a39      	ldr	r2, [pc, #228]	; (80004e0 <display_handler+0x108>)
 80003fa:	fb82 1203 	smull	r1, r2, r2, r3
 80003fe:	1092      	asrs	r2, r2, #2
 8000400:	17db      	asrs	r3, r3, #31
 8000402:	1ad2      	subs	r2, r2, r3
 8000404:	f107 0308 	add.w	r3, r7, #8
 8000408:	4611      	mov	r1, r2
 800040a:	4618      	mov	r0, r3
 800040c:	f000 f870 	bl	80004f0 <set_bit_array>
    print_bits(bit_array);
 8000410:	f107 0308 	add.w	r3, r7, #8
 8000414:	4618      	mov	r0, r3
 8000416:	f7ff ff9f 	bl	8000358 <print_bits>
    send_8_bits(bit_array);
 800041a:	f107 0308 	add.w	r3, r7, #8
 800041e:	4618      	mov	r0, r3
 8000420:	f000 fa1c 	bl	800085c <send_8_bits>

    // Program Digit2
    GPIOA->BSRR = DIGIT_TWO;
 8000424:	4b2c      	ldr	r3, [pc, #176]	; (80004d8 <display_handler+0x100>)
 8000426:	4a2f      	ldr	r2, [pc, #188]	; (80004e4 <display_handler+0x10c>)
 8000428:	619a      	str	r2, [r3, #24]
    set_bit_array(bit_array, (m % 10));
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	4b2c      	ldr	r3, [pc, #176]	; (80004e0 <display_handler+0x108>)
 800042e:	fb83 1302 	smull	r1, r3, r3, r2
 8000432:	1099      	asrs	r1, r3, #2
 8000434:	17d3      	asrs	r3, r2, #31
 8000436:	1ac9      	subs	r1, r1, r3
 8000438:	460b      	mov	r3, r1
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	440b      	add	r3, r1
 800043e:	005b      	lsls	r3, r3, #1
 8000440:	1ad1      	subs	r1, r2, r3
 8000442:	f107 0308 	add.w	r3, r7, #8
 8000446:	4618      	mov	r0, r3
 8000448:	f000 f852 	bl	80004f0 <set_bit_array>
    print_bits(bit_array);
 800044c:	f107 0308 	add.w	r3, r7, #8
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff ff81 	bl	8000358 <print_bits>
    send_8_bits(bit_array);
 8000456:	f107 0308 	add.w	r3, r7, #8
 800045a:	4618      	mov	r0, r3
 800045c:	f000 f9fe 	bl	800085c <send_8_bits>

    // Program Digit3
    GPIOA->BSRR = DIGIT_THREE;
 8000460:	4b1d      	ldr	r3, [pc, #116]	; (80004d8 <display_handler+0x100>)
 8000462:	4a21      	ldr	r2, [pc, #132]	; (80004e8 <display_handler+0x110>)
 8000464:	619a      	str	r2, [r3, #24]
    set_bit_array(bit_array, ((int)(s / 10)));
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	4a1d      	ldr	r2, [pc, #116]	; (80004e0 <display_handler+0x108>)
 800046a:	fb82 1203 	smull	r1, r2, r2, r3
 800046e:	1092      	asrs	r2, r2, #2
 8000470:	17db      	asrs	r3, r3, #31
 8000472:	1ad2      	subs	r2, r2, r3
 8000474:	f107 0308 	add.w	r3, r7, #8
 8000478:	4611      	mov	r1, r2
 800047a:	4618      	mov	r0, r3
 800047c:	f000 f838 	bl	80004f0 <set_bit_array>
    print_bits(bit_array);
 8000480:	f107 0308 	add.w	r3, r7, #8
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff ff67 	bl	8000358 <print_bits>
    send_8_bits(bit_array);
 800048a:	f107 0308 	add.w	r3, r7, #8
 800048e:	4618      	mov	r0, r3
 8000490:	f000 f9e4 	bl	800085c <send_8_bits>

    // Program Digit4
    GPIOA->BSRR = DIGIT_FOUR;
 8000494:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <display_handler+0x100>)
 8000496:	4a15      	ldr	r2, [pc, #84]	; (80004ec <display_handler+0x114>)
 8000498:	619a      	str	r2, [r3, #24]
    set_bit_array(bit_array, (s % 10));
 800049a:	683a      	ldr	r2, [r7, #0]
 800049c:	4b10      	ldr	r3, [pc, #64]	; (80004e0 <display_handler+0x108>)
 800049e:	fb83 1302 	smull	r1, r3, r3, r2
 80004a2:	1099      	asrs	r1, r3, #2
 80004a4:	17d3      	asrs	r3, r2, #31
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	460b      	mov	r3, r1
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	440b      	add	r3, r1
 80004ae:	005b      	lsls	r3, r3, #1
 80004b0:	1ad1      	subs	r1, r2, r3
 80004b2:	f107 0308 	add.w	r3, r7, #8
 80004b6:	4618      	mov	r0, r3
 80004b8:	f000 f81a 	bl	80004f0 <set_bit_array>
    print_bits(bit_array);
 80004bc:	f107 0308 	add.w	r3, r7, #8
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff ff49 	bl	8000358 <print_bits>
    send_8_bits(bit_array);
 80004c6:	f107 0308 	add.w	r3, r7, #8
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 f9c6 	bl	800085c <send_8_bits>

}
 80004d0:	bf00      	nop
 80004d2:	3728      	adds	r7, #40	; 0x28
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	40020000 	.word	0x40020000
 80004dc:	001c0002 	.word	0x001c0002
 80004e0:	66666667 	.word	0x66666667
 80004e4:	001a0004 	.word	0x001a0004
 80004e8:	00160008 	.word	0x00160008
 80004ec:	000e0010 	.word	0x000e0010

080004f0 <set_bit_array>:

void set_bit_array(int bit_array[],int time)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
    // sets bit_array for digit in switch statement, according
    // to 7 segment display segments.
    int* p = (int*)malloc(8 * sizeof(int));
 80004fa:	2020      	movs	r0, #32
 80004fc:	f000 fb66 	bl	8000bcc <malloc>
 8000500:	4603      	mov	r3, r0
 8000502:	60fb      	str	r3, [r7, #12]
    p = bit_array;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	60fb      	str	r3, [r7, #12]
    switch(time)
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	2b09      	cmp	r3, #9
 800050c:	f200 819e 	bhi.w	800084c <set_bit_array+0x35c>
 8000510:	a201      	add	r2, pc, #4	; (adr r2, 8000518 <set_bit_array+0x28>)
 8000512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000516:	bf00      	nop
 8000518:	08000541 	.word	0x08000541
 800051c:	0800058f 	.word	0x0800058f
 8000520:	080005dd 	.word	0x080005dd
 8000524:	0800062b 	.word	0x0800062b
 8000528:	08000679 	.word	0x08000679
 800052c:	080006c7 	.word	0x080006c7
 8000530:	08000715 	.word	0x08000715
 8000534:	08000763 	.word	0x08000763
 8000538:	080007b1 	.word	0x080007b1
 800053c:	080007ff 	.word	0x080007ff
    {
        case 0:
            *p++ = 1; *p++ = 1; *p++ = 1; *p++ = 1;
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	1d1a      	adds	r2, r3, #4
 8000544:	60fa      	str	r2, [r7, #12]
 8000546:	2201      	movs	r2, #1
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	1d1a      	adds	r2, r3, #4
 800054e:	60fa      	str	r2, [r7, #12]
 8000550:	2201      	movs	r2, #1
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	1d1a      	adds	r2, r3, #4
 8000558:	60fa      	str	r2, [r7, #12]
 800055a:	2201      	movs	r2, #1
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	1d1a      	adds	r2, r3, #4
 8000562:	60fa      	str	r2, [r7, #12]
 8000564:	2201      	movs	r2, #1
 8000566:	601a      	str	r2, [r3, #0]
            *p++ = 1; *p++ = 1; *p++ = 0; *p = 0;
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	1d1a      	adds	r2, r3, #4
 800056c:	60fa      	str	r2, [r7, #12]
 800056e:	2201      	movs	r2, #1
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	1d1a      	adds	r2, r3, #4
 8000576:	60fa      	str	r2, [r7, #12]
 8000578:	2201      	movs	r2, #1
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	1d1a      	adds	r2, r3, #4
 8000580:	60fa      	str	r2, [r7, #12]
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
            break;
 800058c:	e15e      	b.n	800084c <set_bit_array+0x35c>
        case 1:
            *p++ = 0; *p++ = 1; *p++ = 1; *p++ = 0; 
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	1d1a      	adds	r2, r3, #4
 8000592:	60fa      	str	r2, [r7, #12]
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	1d1a      	adds	r2, r3, #4
 800059c:	60fa      	str	r2, [r7, #12]
 800059e:	2201      	movs	r2, #1
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	1d1a      	adds	r2, r3, #4
 80005a6:	60fa      	str	r2, [r7, #12]
 80005a8:	2201      	movs	r2, #1
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	1d1a      	adds	r2, r3, #4
 80005b0:	60fa      	str	r2, [r7, #12]
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
            *p++ = 0; *p++ = 0; *p++ = 0; *p = 0;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	1d1a      	adds	r2, r3, #4
 80005ba:	60fa      	str	r2, [r7, #12]
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	1d1a      	adds	r2, r3, #4
 80005c4:	60fa      	str	r2, [r7, #12]
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	1d1a      	adds	r2, r3, #4
 80005ce:	60fa      	str	r2, [r7, #12]
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
            break;
 80005da:	e137      	b.n	800084c <set_bit_array+0x35c>
        case 2:
            *p++ = 1; *p++ = 1; *p++ = 0; *p++ = 1;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	1d1a      	adds	r2, r3, #4
 80005e0:	60fa      	str	r2, [r7, #12]
 80005e2:	2201      	movs	r2, #1
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	1d1a      	adds	r2, r3, #4
 80005ea:	60fa      	str	r2, [r7, #12]
 80005ec:	2201      	movs	r2, #1
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	1d1a      	adds	r2, r3, #4
 80005f4:	60fa      	str	r2, [r7, #12]
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	1d1a      	adds	r2, r3, #4
 80005fe:	60fa      	str	r2, [r7, #12]
 8000600:	2201      	movs	r2, #1
 8000602:	601a      	str	r2, [r3, #0]
            *p++ = 1; *p++ = 0; *p++ = 1; *p = 0;
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	1d1a      	adds	r2, r3, #4
 8000608:	60fa      	str	r2, [r7, #12]
 800060a:	2201      	movs	r2, #1
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	1d1a      	adds	r2, r3, #4
 8000612:	60fa      	str	r2, [r7, #12]
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	1d1a      	adds	r2, r3, #4
 800061c:	60fa      	str	r2, [r7, #12]
 800061e:	2201      	movs	r2, #1
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
            break;
 8000628:	e110      	b.n	800084c <set_bit_array+0x35c>
        case 3:
            *p++ = 1; *p++ = 1; *p++ = 1; *p++ = 1;
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	1d1a      	adds	r2, r3, #4
 800062e:	60fa      	str	r2, [r7, #12]
 8000630:	2201      	movs	r2, #1
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	1d1a      	adds	r2, r3, #4
 8000638:	60fa      	str	r2, [r7, #12]
 800063a:	2201      	movs	r2, #1
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	1d1a      	adds	r2, r3, #4
 8000642:	60fa      	str	r2, [r7, #12]
 8000644:	2201      	movs	r2, #1
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	1d1a      	adds	r2, r3, #4
 800064c:	60fa      	str	r2, [r7, #12]
 800064e:	2201      	movs	r2, #1
 8000650:	601a      	str	r2, [r3, #0]
            *p++ = 0; *p++ = 0; *p++ = 1; *p = 0;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	1d1a      	adds	r2, r3, #4
 8000656:	60fa      	str	r2, [r7, #12]
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	1d1a      	adds	r2, r3, #4
 8000660:	60fa      	str	r2, [r7, #12]
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	1d1a      	adds	r2, r3, #4
 800066a:	60fa      	str	r2, [r7, #12]
 800066c:	2201      	movs	r2, #1
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
            break;
 8000676:	e0e9      	b.n	800084c <set_bit_array+0x35c>
        case 4:
            *p++ = 0; *p++ = 1; *p++ = 1; *p++ = 0;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	1d1a      	adds	r2, r3, #4
 800067c:	60fa      	str	r2, [r7, #12]
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	1d1a      	adds	r2, r3, #4
 8000686:	60fa      	str	r2, [r7, #12]
 8000688:	2201      	movs	r2, #1
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	1d1a      	adds	r2, r3, #4
 8000690:	60fa      	str	r2, [r7, #12]
 8000692:	2201      	movs	r2, #1
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	1d1a      	adds	r2, r3, #4
 800069a:	60fa      	str	r2, [r7, #12]
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
            *p++ = 0; *p++ = 1; *p++ = 1; *p = 0;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	1d1a      	adds	r2, r3, #4
 80006a4:	60fa      	str	r2, [r7, #12]
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	1d1a      	adds	r2, r3, #4
 80006ae:	60fa      	str	r2, [r7, #12]
 80006b0:	2201      	movs	r2, #1
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	1d1a      	adds	r2, r3, #4
 80006b8:	60fa      	str	r2, [r7, #12]
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
            break;
 80006c4:	e0c2      	b.n	800084c <set_bit_array+0x35c>
        case 5:
            *p++ = 1; *p++ = 0; *p++ = 1; *p++ = 1;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	1d1a      	adds	r2, r3, #4
 80006ca:	60fa      	str	r2, [r7, #12]
 80006cc:	2201      	movs	r2, #1
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	1d1a      	adds	r2, r3, #4
 80006d4:	60fa      	str	r2, [r7, #12]
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	1d1a      	adds	r2, r3, #4
 80006de:	60fa      	str	r2, [r7, #12]
 80006e0:	2201      	movs	r2, #1
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	1d1a      	adds	r2, r3, #4
 80006e8:	60fa      	str	r2, [r7, #12]
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
            *p++ = 0; *p++ = 1; *p++ = 1; *p = 0;
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	1d1a      	adds	r2, r3, #4
 80006f2:	60fa      	str	r2, [r7, #12]
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	1d1a      	adds	r2, r3, #4
 80006fc:	60fa      	str	r2, [r7, #12]
 80006fe:	2201      	movs	r2, #1
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	1d1a      	adds	r2, r3, #4
 8000706:	60fa      	str	r2, [r7, #12]
 8000708:	2201      	movs	r2, #1
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
            break;
 8000712:	e09b      	b.n	800084c <set_bit_array+0x35c>
        case 6:
            *p++ = 1; *p++ = 0; *p++ = 1; *p++ = 1;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	1d1a      	adds	r2, r3, #4
 8000718:	60fa      	str	r2, [r7, #12]
 800071a:	2201      	movs	r2, #1
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	1d1a      	adds	r2, r3, #4
 8000722:	60fa      	str	r2, [r7, #12]
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	1d1a      	adds	r2, r3, #4
 800072c:	60fa      	str	r2, [r7, #12]
 800072e:	2201      	movs	r2, #1
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	1d1a      	adds	r2, r3, #4
 8000736:	60fa      	str	r2, [r7, #12]
 8000738:	2201      	movs	r2, #1
 800073a:	601a      	str	r2, [r3, #0]
            *p++ = 1; *p++ = 1; *p++ = 1; *p = 0;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	1d1a      	adds	r2, r3, #4
 8000740:	60fa      	str	r2, [r7, #12]
 8000742:	2201      	movs	r2, #1
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	1d1a      	adds	r2, r3, #4
 800074a:	60fa      	str	r2, [r7, #12]
 800074c:	2201      	movs	r2, #1
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	1d1a      	adds	r2, r3, #4
 8000754:	60fa      	str	r2, [r7, #12]
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
            break;
 8000760:	e074      	b.n	800084c <set_bit_array+0x35c>
        case 7:
            *p++ = 1; *p++ = 1; *p++ = 1; *p++ = 0;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	1d1a      	adds	r2, r3, #4
 8000766:	60fa      	str	r2, [r7, #12]
 8000768:	2201      	movs	r2, #1
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	1d1a      	adds	r2, r3, #4
 8000770:	60fa      	str	r2, [r7, #12]
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	1d1a      	adds	r2, r3, #4
 800077a:	60fa      	str	r2, [r7, #12]
 800077c:	2201      	movs	r2, #1
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	1d1a      	adds	r2, r3, #4
 8000784:	60fa      	str	r2, [r7, #12]
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
            *p++ = 0; *p++ = 0; *p++ = 0; *p = 0;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	1d1a      	adds	r2, r3, #4
 800078e:	60fa      	str	r2, [r7, #12]
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	1d1a      	adds	r2, r3, #4
 8000798:	60fa      	str	r2, [r7, #12]
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	1d1a      	adds	r2, r3, #4
 80007a2:	60fa      	str	r2, [r7, #12]
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
            break;
 80007ae:	e04d      	b.n	800084c <set_bit_array+0x35c>
        case 8:
            *p++ = 1; *p++ = 1; *p++ = 1; *p++ = 1;
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	1d1a      	adds	r2, r3, #4
 80007b4:	60fa      	str	r2, [r7, #12]
 80007b6:	2201      	movs	r2, #1
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	1d1a      	adds	r2, r3, #4
 80007be:	60fa      	str	r2, [r7, #12]
 80007c0:	2201      	movs	r2, #1
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	1d1a      	adds	r2, r3, #4
 80007c8:	60fa      	str	r2, [r7, #12]
 80007ca:	2201      	movs	r2, #1
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	1d1a      	adds	r2, r3, #4
 80007d2:	60fa      	str	r2, [r7, #12]
 80007d4:	2201      	movs	r2, #1
 80007d6:	601a      	str	r2, [r3, #0]
            *p++ = 1; *p++ = 1; *p++ = 1; *p = 0;
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	1d1a      	adds	r2, r3, #4
 80007dc:	60fa      	str	r2, [r7, #12]
 80007de:	2201      	movs	r2, #1
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	1d1a      	adds	r2, r3, #4
 80007e6:	60fa      	str	r2, [r7, #12]
 80007e8:	2201      	movs	r2, #1
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	1d1a      	adds	r2, r3, #4
 80007f0:	60fa      	str	r2, [r7, #12]
 80007f2:	2201      	movs	r2, #1
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
            break;
 80007fc:	e026      	b.n	800084c <set_bit_array+0x35c>
        case 9:
            *p++ = 1; *p++ = 1; *p++ = 1; *p++ = 0;
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	1d1a      	adds	r2, r3, #4
 8000802:	60fa      	str	r2, [r7, #12]
 8000804:	2201      	movs	r2, #1
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	1d1a      	adds	r2, r3, #4
 800080c:	60fa      	str	r2, [r7, #12]
 800080e:	2201      	movs	r2, #1
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	1d1a      	adds	r2, r3, #4
 8000816:	60fa      	str	r2, [r7, #12]
 8000818:	2201      	movs	r2, #1
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	1d1a      	adds	r2, r3, #4
 8000820:	60fa      	str	r2, [r7, #12]
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
            *p++ = 0; *p++ = 1; *p++ = 1; *p = 0;
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	1d1a      	adds	r2, r3, #4
 800082a:	60fa      	str	r2, [r7, #12]
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	1d1a      	adds	r2, r3, #4
 8000834:	60fa      	str	r2, [r7, #12]
 8000836:	2201      	movs	r2, #1
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	1d1a      	adds	r2, r3, #4
 800083e:	60fa      	str	r2, [r7, #12]
 8000840:	2201      	movs	r2, #1
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
            break;
 800084a:	bf00      	nop
    }
    free(p); //deallocate pointer
 800084c:	68f8      	ldr	r0, [r7, #12]
 800084e:	f000 f9c5 	bl	8000bdc <free>
}
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop

0800085c <send_8_bits>:
void send_8_bits(int bit_array[])
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < 8; i++)
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	e013      	b.n	8000892 <send_8_bits+0x36>
    { 
        //loop through and set pin data
        if (bit_array[i] == 1)
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	4413      	add	r3, r2
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d103      	bne.n	8000880 <send_8_bits+0x24>
        {
            GPIOA->BSRR = DATA_PIN_ON;
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <send_8_bits+0x48>)
 800087a:	2220      	movs	r2, #32
 800087c:	619a      	str	r2, [r3, #24]
 800087e:	e003      	b.n	8000888 <send_8_bits+0x2c>
        }
        else
        {
            GPIOA->BSRR = DATA_PIN_OFF;
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <send_8_bits+0x48>)
 8000882:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000886:	619a      	str	r2, [r3, #24]
        }
        //pulse clock
        pulse_clock();
 8000888:	f000 f80e 	bl	80008a8 <pulse_clock>
    for(int i = 0; i < 8; i++)
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	3301      	adds	r3, #1
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	2b07      	cmp	r3, #7
 8000896:	dde8      	ble.n	800086a <send_8_bits+0xe>
    }
    //pulse latch to catch
    pulse_latch();
 8000898:	f000 f818 	bl	80008cc <pulse_latch>
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40020000 	.word	0x40020000

080008a8 <pulse_clock>:

void pulse_clock()
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
    // clock on / clock off
    GPIOA->BSRR = SR_CLOCK_ON;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <pulse_clock+0x20>)
 80008ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008b2:	619a      	str	r2, [r3, #24]
    GPIOA->BSRR = SR_CLOCK_OFF;
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <pulse_clock+0x20>)
 80008b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008ba:	619a      	str	r2, [r3, #24]
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40020000 	.word	0x40020000

080008cc <pulse_latch>:

void pulse_latch()
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
    // latch on / latch off
    GPIOA->BSRR = LATCH_ON;
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <pulse_latch+0x1c>)
 80008d2:	2280      	movs	r2, #128	; 0x80
 80008d4:	619a      	str	r2, [r3, #24]
    GPIOA->BSRR = LATCH_OFF;
 80008d6:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <pulse_latch+0x1c>)
 80008d8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008dc:	619a      	str	r2, [r3, #24]
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	40020000 	.word	0x40020000

080008ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	e00a      	b.n	8000914 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008fe:	f3af 8000 	nop.w
 8000902:	4601      	mov	r1, r0
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	1c5a      	adds	r2, r3, #1
 8000908:	60ba      	str	r2, [r7, #8]
 800090a:	b2ca      	uxtb	r2, r1
 800090c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	3301      	adds	r3, #1
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	697a      	ldr	r2, [r7, #20]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	429a      	cmp	r2, r3
 800091a:	dbf0      	blt.n	80008fe <_read+0x12>
  }

  return len;
 800091c:	687b      	ldr	r3, [r7, #4]
}
 800091e:	4618      	mov	r0, r3
 8000920:	3718      	adds	r7, #24
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b086      	sub	sp, #24
 800092a:	af00      	add	r7, sp, #0
 800092c:	60f8      	str	r0, [r7, #12]
 800092e:	60b9      	str	r1, [r7, #8]
 8000930:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	e009      	b.n	800094c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	1c5a      	adds	r2, r3, #1
 800093c:	60ba      	str	r2, [r7, #8]
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	4618      	mov	r0, r3
 8000942:	f000 f8d9 	bl	8000af8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	3301      	adds	r3, #1
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697a      	ldr	r2, [r7, #20]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	429a      	cmp	r2, r3
 8000952:	dbf1      	blt.n	8000938 <_write+0x12>
  }
  return len;
 8000954:	687b      	ldr	r3, [r7, #4]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <_close>:

int _close(int file)
{
 800095e:	b480      	push	{r7}
 8000960:	b083      	sub	sp, #12
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800096a:	4618      	mov	r0, r3
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000976:	b480      	push	{r7}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
 800097e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000986:	605a      	str	r2, [r3, #4]
  return 0;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <_isatty>:

int _isatty(int file)
{
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800099e:	2301      	movs	r3, #1
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
	...

080009c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d0:	4a14      	ldr	r2, [pc, #80]	; (8000a24 <_sbrk+0x5c>)
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <_sbrk+0x60>)
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <_sbrk+0x64>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d102      	bne.n	80009ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <_sbrk+0x64>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <_sbrk+0x68>)
 80009e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <_sbrk+0x64>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d207      	bcs.n	8000a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f8:	f000 fa7e 	bl	8000ef8 <__errno>
 80009fc:	4603      	mov	r3, r0
 80009fe:	220c      	movs	r2, #12
 8000a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a06:	e009      	b.n	8000a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <_sbrk+0x64>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a0e:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <_sbrk+0x64>)
 8000a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20020000 	.word	0x20020000
 8000a28:	00000400 	.word	0x00000400
 8000a2c:	2000007c 	.word	0x2000007c
 8000a30:	200001d0 	.word	0x200001d0

08000a34 <tim2_1hz_init>:
           
#define TIM2EN              (1U<<0) // APB1ENR
#define CR1_CEN             (1U<<0)

void tim2_1hz_init()
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
    /*****Configure Timer to 1 Hz*****/
    RCC->APB1ENR |= TIM2EN;
 8000a38:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <tim2_1hz_init+0x48>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	4a0f      	ldr	r2, [pc, #60]	; (8000a7c <tim2_1hz_init+0x48>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	6413      	str	r3, [r2, #64]	; 0x40
    TIM2->PSC = 1600 - 1;
 8000a44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a48:	f240 623f 	movw	r2, #1599	; 0x63f
 8000a4c:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 10000 - 1;
 8000a4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a52:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a56:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CNT = 0;
 8000a58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	625a      	str	r2, [r3, #36]	; 0x24
    TIM2->CR1 |= CR1_CEN;
 8000a60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	6013      	str	r3, [r2, #0]
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800

08000a80 <uart1_tx_init>:
/* Function Declerations */
void uart1_set_brr(uint32_t periphClk, uint32_t baud);
void uart1_write(int ch);

void uart1_tx_init()
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
    /***** Configure GPIOA PIN9 *****/
    RCC->AHB1ENR |= GPIOAEN;
 8000a84:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <uart1_tx_init+0x68>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a88:	4a17      	ldr	r2, [pc, #92]	; (8000ae8 <uart1_tx_init+0x68>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOA->MODER |= PIN9_MODE;
 8000a90:	4b16      	ldr	r3, [pc, #88]	; (8000aec <uart1_tx_init+0x6c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a15      	ldr	r2, [pc, #84]	; (8000aec <uart1_tx_init+0x6c>)
 8000a96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a9a:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] |= UART_AF;
 8000a9c:	4b13      	ldr	r3, [pc, #76]	; (8000aec <uart1_tx_init+0x6c>)
 8000a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa0:	4a12      	ldr	r2, [pc, #72]	; (8000aec <uart1_tx_init+0x6c>)
 8000aa2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000aa6:	6253      	str	r3, [r2, #36]	; 0x24

    /***** Configure USART1 *****/
    RCC->APB2ENR |= USART1EN;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <uart1_tx_init+0x68>)
 8000aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aac:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <uart1_tx_init+0x68>)
 8000aae:	f043 0310 	orr.w	r3, r3, #16
 8000ab2:	6453      	str	r3, [r2, #68]	; 0x44
    USART1->CR1 &= ~CR1_UE; // disable usart 
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <uart1_tx_init+0x70>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <uart1_tx_init+0x70>)
 8000aba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000abe:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= CR1_TE; // enable TX
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <uart1_tx_init+0x70>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <uart1_tx_init+0x70>)
 8000ac6:	f043 0308 	orr.w	r3, r3, #8
 8000aca:	60d3      	str	r3, [r2, #12]
    uart1_set_brr(APB2CLK, BAUDRATE);
 8000acc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000ad0:	4808      	ldr	r0, [pc, #32]	; (8000af4 <uart1_tx_init+0x74>)
 8000ad2:	f000 f81d 	bl	8000b10 <uart1_set_brr>
    USART1->CR1 |= CR1_UE;
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <uart1_tx_init+0x70>)
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <uart1_tx_init+0x70>)
 8000adc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ae0:	60d3      	str	r3, [r2, #12]
    
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020000 	.word	0x40020000
 8000af0:	40011000 	.word	0x40011000
 8000af4:	00f42400 	.word	0x00f42400

08000af8 <__io_putchar>:

int __io_putchar(int ch)
{ 
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
    /*Overwrite printf*/
    uart1_write(ch);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f000 f821 	bl	8000b48 <uart1_write>
    return ch;
 8000b06:	687b      	ldr	r3, [r7, #4]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <uart1_set_brr>:

void uart1_set_brr(uint32_t periphClk, uint32_t baud)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
    uint16_t uartdiv = periphClk / baud;
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b22:	81fb      	strh	r3, [r7, #14]
    USART1->BRR = (((uartdiv / 16) << 4) | (uartdiv % 16));
 8000b24:	89fb      	ldrh	r3, [r7, #14]
 8000b26:	091b      	lsrs	r3, r3, #4
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	011a      	lsls	r2, r3, #4
 8000b2c:	89fb      	ldrh	r3, [r7, #14]
 8000b2e:	f003 030f 	and.w	r3, r3, #15
 8000b32:	431a      	orrs	r2, r3
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <uart1_set_brr+0x34>)
 8000b36:	609a      	str	r2, [r3, #8]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	40011000 	.word	0x40011000

08000b48 <uart1_write>:

void uart1_write(int ch)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
    while(!(USART1->SR & SR_TXE)){}
 8000b50:	bf00      	nop
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <uart1_write+0x2c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d0f9      	beq.n	8000b52 <uart1_write+0xa>
    USART1->DR = (ch & 0xFF);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <uart1_write+0x2c>)
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	6053      	str	r3, [r2, #4]
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40011000 	.word	0x40011000

08000b78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b78:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b7a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b7c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b80:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b82:	490d      	ldr	r1, [pc, #52]	; (8000bb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b84:	4a0d      	ldr	r2, [pc, #52]	; (8000bbc <LoopForever+0xe>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b88:	e002      	b.n	8000b90 <LoopCopyDataInit>

08000b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8e:	3304      	adds	r3, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b94:	d3f9      	bcc.n	8000b8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b96:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b98:	4c0a      	ldr	r4, [pc, #40]	; (8000bc4 <LoopForever+0x16>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b9c:	e001      	b.n	8000ba2 <LoopFillZerobss>

08000b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba0:	3204      	adds	r2, #4

08000ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba4:	d3fb      	bcc.n	8000b9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ba6:	f000 f9ad 	bl	8000f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000baa:	f7ff fba5 	bl	80002f8 <main>

08000bae <LoopForever>:

LoopForever:
  b LoopForever
 8000bae:	e7fe      	b.n	8000bae <LoopForever>
  ldr   r0, =_estack
 8000bb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bbc:	08001a8c 	.word	0x08001a8c
  ldr r2, =_sbss
 8000bc0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bc4:	200001cc 	.word	0x200001cc

08000bc8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC_IRQHandler>
	...

08000bcc <malloc>:
 8000bcc:	4b02      	ldr	r3, [pc, #8]	; (8000bd8 <malloc+0xc>)
 8000bce:	4601      	mov	r1, r0
 8000bd0:	6818      	ldr	r0, [r3, #0]
 8000bd2:	f000 b82b 	b.w	8000c2c <_malloc_r>
 8000bd6:	bf00      	nop
 8000bd8:	20000058 	.word	0x20000058

08000bdc <free>:
 8000bdc:	4b02      	ldr	r3, [pc, #8]	; (8000be8 <free+0xc>)
 8000bde:	4601      	mov	r1, r0
 8000be0:	6818      	ldr	r0, [r3, #0]
 8000be2:	f000 b9b5 	b.w	8000f50 <_free_r>
 8000be6:	bf00      	nop
 8000be8:	20000058 	.word	0x20000058

08000bec <sbrk_aligned>:
 8000bec:	b570      	push	{r4, r5, r6, lr}
 8000bee:	4e0e      	ldr	r6, [pc, #56]	; (8000c28 <sbrk_aligned+0x3c>)
 8000bf0:	460c      	mov	r4, r1
 8000bf2:	6831      	ldr	r1, [r6, #0]
 8000bf4:	4605      	mov	r5, r0
 8000bf6:	b911      	cbnz	r1, 8000bfe <sbrk_aligned+0x12>
 8000bf8:	f000 f96e 	bl	8000ed8 <_sbrk_r>
 8000bfc:	6030      	str	r0, [r6, #0]
 8000bfe:	4621      	mov	r1, r4
 8000c00:	4628      	mov	r0, r5
 8000c02:	f000 f969 	bl	8000ed8 <_sbrk_r>
 8000c06:	1c43      	adds	r3, r0, #1
 8000c08:	d00a      	beq.n	8000c20 <sbrk_aligned+0x34>
 8000c0a:	1cc4      	adds	r4, r0, #3
 8000c0c:	f024 0403 	bic.w	r4, r4, #3
 8000c10:	42a0      	cmp	r0, r4
 8000c12:	d007      	beq.n	8000c24 <sbrk_aligned+0x38>
 8000c14:	1a21      	subs	r1, r4, r0
 8000c16:	4628      	mov	r0, r5
 8000c18:	f000 f95e 	bl	8000ed8 <_sbrk_r>
 8000c1c:	3001      	adds	r0, #1
 8000c1e:	d101      	bne.n	8000c24 <sbrk_aligned+0x38>
 8000c20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000c24:	4620      	mov	r0, r4
 8000c26:	bd70      	pop	{r4, r5, r6, pc}
 8000c28:	20000084 	.word	0x20000084

08000c2c <_malloc_r>:
 8000c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c30:	1ccd      	adds	r5, r1, #3
 8000c32:	f025 0503 	bic.w	r5, r5, #3
 8000c36:	3508      	adds	r5, #8
 8000c38:	2d0c      	cmp	r5, #12
 8000c3a:	bf38      	it	cc
 8000c3c:	250c      	movcc	r5, #12
 8000c3e:	2d00      	cmp	r5, #0
 8000c40:	4607      	mov	r7, r0
 8000c42:	db01      	blt.n	8000c48 <_malloc_r+0x1c>
 8000c44:	42a9      	cmp	r1, r5
 8000c46:	d905      	bls.n	8000c54 <_malloc_r+0x28>
 8000c48:	230c      	movs	r3, #12
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	2600      	movs	r6, #0
 8000c4e:	4630      	mov	r0, r6
 8000c50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000d28 <_malloc_r+0xfc>
 8000c58:	f000 f868 	bl	8000d2c <__malloc_lock>
 8000c5c:	f8d8 3000 	ldr.w	r3, [r8]
 8000c60:	461c      	mov	r4, r3
 8000c62:	bb5c      	cbnz	r4, 8000cbc <_malloc_r+0x90>
 8000c64:	4629      	mov	r1, r5
 8000c66:	4638      	mov	r0, r7
 8000c68:	f7ff ffc0 	bl	8000bec <sbrk_aligned>
 8000c6c:	1c43      	adds	r3, r0, #1
 8000c6e:	4604      	mov	r4, r0
 8000c70:	d155      	bne.n	8000d1e <_malloc_r+0xf2>
 8000c72:	f8d8 4000 	ldr.w	r4, [r8]
 8000c76:	4626      	mov	r6, r4
 8000c78:	2e00      	cmp	r6, #0
 8000c7a:	d145      	bne.n	8000d08 <_malloc_r+0xdc>
 8000c7c:	2c00      	cmp	r4, #0
 8000c7e:	d048      	beq.n	8000d12 <_malloc_r+0xe6>
 8000c80:	6823      	ldr	r3, [r4, #0]
 8000c82:	4631      	mov	r1, r6
 8000c84:	4638      	mov	r0, r7
 8000c86:	eb04 0903 	add.w	r9, r4, r3
 8000c8a:	f000 f925 	bl	8000ed8 <_sbrk_r>
 8000c8e:	4581      	cmp	r9, r0
 8000c90:	d13f      	bne.n	8000d12 <_malloc_r+0xe6>
 8000c92:	6821      	ldr	r1, [r4, #0]
 8000c94:	1a6d      	subs	r5, r5, r1
 8000c96:	4629      	mov	r1, r5
 8000c98:	4638      	mov	r0, r7
 8000c9a:	f7ff ffa7 	bl	8000bec <sbrk_aligned>
 8000c9e:	3001      	adds	r0, #1
 8000ca0:	d037      	beq.n	8000d12 <_malloc_r+0xe6>
 8000ca2:	6823      	ldr	r3, [r4, #0]
 8000ca4:	442b      	add	r3, r5
 8000ca6:	6023      	str	r3, [r4, #0]
 8000ca8:	f8d8 3000 	ldr.w	r3, [r8]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d038      	beq.n	8000d22 <_malloc_r+0xf6>
 8000cb0:	685a      	ldr	r2, [r3, #4]
 8000cb2:	42a2      	cmp	r2, r4
 8000cb4:	d12b      	bne.n	8000d0e <_malloc_r+0xe2>
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	e00f      	b.n	8000cdc <_malloc_r+0xb0>
 8000cbc:	6822      	ldr	r2, [r4, #0]
 8000cbe:	1b52      	subs	r2, r2, r5
 8000cc0:	d41f      	bmi.n	8000d02 <_malloc_r+0xd6>
 8000cc2:	2a0b      	cmp	r2, #11
 8000cc4:	d917      	bls.n	8000cf6 <_malloc_r+0xca>
 8000cc6:	1961      	adds	r1, r4, r5
 8000cc8:	42a3      	cmp	r3, r4
 8000cca:	6025      	str	r5, [r4, #0]
 8000ccc:	bf18      	it	ne
 8000cce:	6059      	strne	r1, [r3, #4]
 8000cd0:	6863      	ldr	r3, [r4, #4]
 8000cd2:	bf08      	it	eq
 8000cd4:	f8c8 1000 	streq.w	r1, [r8]
 8000cd8:	5162      	str	r2, [r4, r5]
 8000cda:	604b      	str	r3, [r1, #4]
 8000cdc:	4638      	mov	r0, r7
 8000cde:	f104 060b 	add.w	r6, r4, #11
 8000ce2:	f000 f829 	bl	8000d38 <__malloc_unlock>
 8000ce6:	f026 0607 	bic.w	r6, r6, #7
 8000cea:	1d23      	adds	r3, r4, #4
 8000cec:	1af2      	subs	r2, r6, r3
 8000cee:	d0ae      	beq.n	8000c4e <_malloc_r+0x22>
 8000cf0:	1b9b      	subs	r3, r3, r6
 8000cf2:	50a3      	str	r3, [r4, r2]
 8000cf4:	e7ab      	b.n	8000c4e <_malloc_r+0x22>
 8000cf6:	42a3      	cmp	r3, r4
 8000cf8:	6862      	ldr	r2, [r4, #4]
 8000cfa:	d1dd      	bne.n	8000cb8 <_malloc_r+0x8c>
 8000cfc:	f8c8 2000 	str.w	r2, [r8]
 8000d00:	e7ec      	b.n	8000cdc <_malloc_r+0xb0>
 8000d02:	4623      	mov	r3, r4
 8000d04:	6864      	ldr	r4, [r4, #4]
 8000d06:	e7ac      	b.n	8000c62 <_malloc_r+0x36>
 8000d08:	4634      	mov	r4, r6
 8000d0a:	6876      	ldr	r6, [r6, #4]
 8000d0c:	e7b4      	b.n	8000c78 <_malloc_r+0x4c>
 8000d0e:	4613      	mov	r3, r2
 8000d10:	e7cc      	b.n	8000cac <_malloc_r+0x80>
 8000d12:	230c      	movs	r3, #12
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	4638      	mov	r0, r7
 8000d18:	f000 f80e 	bl	8000d38 <__malloc_unlock>
 8000d1c:	e797      	b.n	8000c4e <_malloc_r+0x22>
 8000d1e:	6025      	str	r5, [r4, #0]
 8000d20:	e7dc      	b.n	8000cdc <_malloc_r+0xb0>
 8000d22:	605b      	str	r3, [r3, #4]
 8000d24:	deff      	udf	#255	; 0xff
 8000d26:	bf00      	nop
 8000d28:	20000080 	.word	0x20000080

08000d2c <__malloc_lock>:
 8000d2c:	4801      	ldr	r0, [pc, #4]	; (8000d34 <__malloc_lock+0x8>)
 8000d2e:	f000 b90d 	b.w	8000f4c <__retarget_lock_acquire_recursive>
 8000d32:	bf00      	nop
 8000d34:	200001c4 	.word	0x200001c4

08000d38 <__malloc_unlock>:
 8000d38:	4801      	ldr	r0, [pc, #4]	; (8000d40 <__malloc_unlock+0x8>)
 8000d3a:	f000 b908 	b.w	8000f4e <__retarget_lock_release_recursive>
 8000d3e:	bf00      	nop
 8000d40:	200001c4 	.word	0x200001c4

08000d44 <std>:
 8000d44:	2300      	movs	r3, #0
 8000d46:	b510      	push	{r4, lr}
 8000d48:	4604      	mov	r4, r0
 8000d4a:	e9c0 3300 	strd	r3, r3, [r0]
 8000d4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000d52:	6083      	str	r3, [r0, #8]
 8000d54:	8181      	strh	r1, [r0, #12]
 8000d56:	6643      	str	r3, [r0, #100]	; 0x64
 8000d58:	81c2      	strh	r2, [r0, #14]
 8000d5a:	6183      	str	r3, [r0, #24]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	2208      	movs	r2, #8
 8000d60:	305c      	adds	r0, #92	; 0x5c
 8000d62:	f000 f8b1 	bl	8000ec8 <memset>
 8000d66:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <std+0x38>)
 8000d68:	6263      	str	r3, [r4, #36]	; 0x24
 8000d6a:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <std+0x3c>)
 8000d6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000d6e:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <std+0x40>)
 8000d70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d72:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <std+0x44>)
 8000d74:	6224      	str	r4, [r4, #32]
 8000d76:	6323      	str	r3, [r4, #48]	; 0x30
 8000d78:	bd10      	pop	{r4, pc}
 8000d7a:	bf00      	nop
 8000d7c:	080016ed 	.word	0x080016ed
 8000d80:	0800170f 	.word	0x0800170f
 8000d84:	08001747 	.word	0x08001747
 8000d88:	0800176b 	.word	0x0800176b

08000d8c <stdio_exit_handler>:
 8000d8c:	4a02      	ldr	r2, [pc, #8]	; (8000d98 <stdio_exit_handler+0xc>)
 8000d8e:	4903      	ldr	r1, [pc, #12]	; (8000d9c <stdio_exit_handler+0x10>)
 8000d90:	4803      	ldr	r0, [pc, #12]	; (8000da0 <stdio_exit_handler+0x14>)
 8000d92:	f000 b869 	b.w	8000e68 <_fwalk_sglue>
 8000d96:	bf00      	nop
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	0800169d 	.word	0x0800169d
 8000da0:	2000000c 	.word	0x2000000c

08000da4 <cleanup_stdio>:
 8000da4:	6841      	ldr	r1, [r0, #4]
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <cleanup_stdio+0x34>)
 8000da8:	4299      	cmp	r1, r3
 8000daa:	b510      	push	{r4, lr}
 8000dac:	4604      	mov	r4, r0
 8000dae:	d001      	beq.n	8000db4 <cleanup_stdio+0x10>
 8000db0:	f000 fc74 	bl	800169c <_fflush_r>
 8000db4:	68a1      	ldr	r1, [r4, #8]
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <cleanup_stdio+0x38>)
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d002      	beq.n	8000dc2 <cleanup_stdio+0x1e>
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	f000 fc6d 	bl	800169c <_fflush_r>
 8000dc2:	68e1      	ldr	r1, [r4, #12]
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <cleanup_stdio+0x3c>)
 8000dc6:	4299      	cmp	r1, r3
 8000dc8:	d004      	beq.n	8000dd4 <cleanup_stdio+0x30>
 8000dca:	4620      	mov	r0, r4
 8000dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000dd0:	f000 bc64 	b.w	800169c <_fflush_r>
 8000dd4:	bd10      	pop	{r4, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000088 	.word	0x20000088
 8000ddc:	200000f0 	.word	0x200000f0
 8000de0:	20000158 	.word	0x20000158

08000de4 <global_stdio_init.part.0>:
 8000de4:	b510      	push	{r4, lr}
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <global_stdio_init.part.0+0x30>)
 8000de8:	4c0b      	ldr	r4, [pc, #44]	; (8000e18 <global_stdio_init.part.0+0x34>)
 8000dea:	4a0c      	ldr	r2, [pc, #48]	; (8000e1c <global_stdio_init.part.0+0x38>)
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	4620      	mov	r0, r4
 8000df0:	2200      	movs	r2, #0
 8000df2:	2104      	movs	r1, #4
 8000df4:	f7ff ffa6 	bl	8000d44 <std>
 8000df8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2109      	movs	r1, #9
 8000e00:	f7ff ffa0 	bl	8000d44 <std>
 8000e04:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000e08:	2202      	movs	r2, #2
 8000e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e0e:	2112      	movs	r1, #18
 8000e10:	f7ff bf98 	b.w	8000d44 <std>
 8000e14:	200001c0 	.word	0x200001c0
 8000e18:	20000088 	.word	0x20000088
 8000e1c:	08000d8d 	.word	0x08000d8d

08000e20 <__sfp_lock_acquire>:
 8000e20:	4801      	ldr	r0, [pc, #4]	; (8000e28 <__sfp_lock_acquire+0x8>)
 8000e22:	f000 b893 	b.w	8000f4c <__retarget_lock_acquire_recursive>
 8000e26:	bf00      	nop
 8000e28:	200001c5 	.word	0x200001c5

08000e2c <__sfp_lock_release>:
 8000e2c:	4801      	ldr	r0, [pc, #4]	; (8000e34 <__sfp_lock_release+0x8>)
 8000e2e:	f000 b88e 	b.w	8000f4e <__retarget_lock_release_recursive>
 8000e32:	bf00      	nop
 8000e34:	200001c5 	.word	0x200001c5

08000e38 <__sinit>:
 8000e38:	b510      	push	{r4, lr}
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	f7ff fff0 	bl	8000e20 <__sfp_lock_acquire>
 8000e40:	6a23      	ldr	r3, [r4, #32]
 8000e42:	b11b      	cbz	r3, 8000e4c <__sinit+0x14>
 8000e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e48:	f7ff bff0 	b.w	8000e2c <__sfp_lock_release>
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <__sinit+0x28>)
 8000e4e:	6223      	str	r3, [r4, #32]
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <__sinit+0x2c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1f5      	bne.n	8000e44 <__sinit+0xc>
 8000e58:	f7ff ffc4 	bl	8000de4 <global_stdio_init.part.0>
 8000e5c:	e7f2      	b.n	8000e44 <__sinit+0xc>
 8000e5e:	bf00      	nop
 8000e60:	08000da5 	.word	0x08000da5
 8000e64:	200001c0 	.word	0x200001c0

08000e68 <_fwalk_sglue>:
 8000e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e6c:	4607      	mov	r7, r0
 8000e6e:	4688      	mov	r8, r1
 8000e70:	4614      	mov	r4, r2
 8000e72:	2600      	movs	r6, #0
 8000e74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000e78:	f1b9 0901 	subs.w	r9, r9, #1
 8000e7c:	d505      	bpl.n	8000e8a <_fwalk_sglue+0x22>
 8000e7e:	6824      	ldr	r4, [r4, #0]
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d1f7      	bne.n	8000e74 <_fwalk_sglue+0xc>
 8000e84:	4630      	mov	r0, r6
 8000e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e8a:	89ab      	ldrh	r3, [r5, #12]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d907      	bls.n	8000ea0 <_fwalk_sglue+0x38>
 8000e90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000e94:	3301      	adds	r3, #1
 8000e96:	d003      	beq.n	8000ea0 <_fwalk_sglue+0x38>
 8000e98:	4629      	mov	r1, r5
 8000e9a:	4638      	mov	r0, r7
 8000e9c:	47c0      	blx	r8
 8000e9e:	4306      	orrs	r6, r0
 8000ea0:	3568      	adds	r5, #104	; 0x68
 8000ea2:	e7e9      	b.n	8000e78 <_fwalk_sglue+0x10>

08000ea4 <iprintf>:
 8000ea4:	b40f      	push	{r0, r1, r2, r3}
 8000ea6:	b507      	push	{r0, r1, r2, lr}
 8000ea8:	4906      	ldr	r1, [pc, #24]	; (8000ec4 <iprintf+0x20>)
 8000eaa:	ab04      	add	r3, sp, #16
 8000eac:	6808      	ldr	r0, [r1, #0]
 8000eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8000eb2:	6881      	ldr	r1, [r0, #8]
 8000eb4:	9301      	str	r3, [sp, #4]
 8000eb6:	f000 f8c1 	bl	800103c <_vfiprintf_r>
 8000eba:	b003      	add	sp, #12
 8000ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ec0:	b004      	add	sp, #16
 8000ec2:	4770      	bx	lr
 8000ec4:	20000058 	.word	0x20000058

08000ec8 <memset>:
 8000ec8:	4402      	add	r2, r0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d100      	bne.n	8000ed2 <memset+0xa>
 8000ed0:	4770      	bx	lr
 8000ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8000ed6:	e7f9      	b.n	8000ecc <memset+0x4>

08000ed8 <_sbrk_r>:
 8000ed8:	b538      	push	{r3, r4, r5, lr}
 8000eda:	4d06      	ldr	r5, [pc, #24]	; (8000ef4 <_sbrk_r+0x1c>)
 8000edc:	2300      	movs	r3, #0
 8000ede:	4604      	mov	r4, r0
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	602b      	str	r3, [r5, #0]
 8000ee4:	f7ff fd70 	bl	80009c8 <_sbrk>
 8000ee8:	1c43      	adds	r3, r0, #1
 8000eea:	d102      	bne.n	8000ef2 <_sbrk_r+0x1a>
 8000eec:	682b      	ldr	r3, [r5, #0]
 8000eee:	b103      	cbz	r3, 8000ef2 <_sbrk_r+0x1a>
 8000ef0:	6023      	str	r3, [r4, #0]
 8000ef2:	bd38      	pop	{r3, r4, r5, pc}
 8000ef4:	200001c8 	.word	0x200001c8

08000ef8 <__errno>:
 8000ef8:	4b01      	ldr	r3, [pc, #4]	; (8000f00 <__errno+0x8>)
 8000efa:	6818      	ldr	r0, [r3, #0]
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000058 	.word	0x20000058

08000f04 <__libc_init_array>:
 8000f04:	b570      	push	{r4, r5, r6, lr}
 8000f06:	4d0d      	ldr	r5, [pc, #52]	; (8000f3c <__libc_init_array+0x38>)
 8000f08:	4c0d      	ldr	r4, [pc, #52]	; (8000f40 <__libc_init_array+0x3c>)
 8000f0a:	1b64      	subs	r4, r4, r5
 8000f0c:	10a4      	asrs	r4, r4, #2
 8000f0e:	2600      	movs	r6, #0
 8000f10:	42a6      	cmp	r6, r4
 8000f12:	d109      	bne.n	8000f28 <__libc_init_array+0x24>
 8000f14:	4d0b      	ldr	r5, [pc, #44]	; (8000f44 <__libc_init_array+0x40>)
 8000f16:	4c0c      	ldr	r4, [pc, #48]	; (8000f48 <__libc_init_array+0x44>)
 8000f18:	f000 fd8a 	bl	8001a30 <_init>
 8000f1c:	1b64      	subs	r4, r4, r5
 8000f1e:	10a4      	asrs	r4, r4, #2
 8000f20:	2600      	movs	r6, #0
 8000f22:	42a6      	cmp	r6, r4
 8000f24:	d105      	bne.n	8000f32 <__libc_init_array+0x2e>
 8000f26:	bd70      	pop	{r4, r5, r6, pc}
 8000f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f2c:	4798      	blx	r3
 8000f2e:	3601      	adds	r6, #1
 8000f30:	e7ee      	b.n	8000f10 <__libc_init_array+0xc>
 8000f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f36:	4798      	blx	r3
 8000f38:	3601      	adds	r6, #1
 8000f3a:	e7f2      	b.n	8000f22 <__libc_init_array+0x1e>
 8000f3c:	08001a84 	.word	0x08001a84
 8000f40:	08001a84 	.word	0x08001a84
 8000f44:	08001a84 	.word	0x08001a84
 8000f48:	08001a88 	.word	0x08001a88

08000f4c <__retarget_lock_acquire_recursive>:
 8000f4c:	4770      	bx	lr

08000f4e <__retarget_lock_release_recursive>:
 8000f4e:	4770      	bx	lr

08000f50 <_free_r>:
 8000f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000f52:	2900      	cmp	r1, #0
 8000f54:	d044      	beq.n	8000fe0 <_free_r+0x90>
 8000f56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f5a:	9001      	str	r0, [sp, #4]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f1a1 0404 	sub.w	r4, r1, #4
 8000f62:	bfb8      	it	lt
 8000f64:	18e4      	addlt	r4, r4, r3
 8000f66:	f7ff fee1 	bl	8000d2c <__malloc_lock>
 8000f6a:	4a1e      	ldr	r2, [pc, #120]	; (8000fe4 <_free_r+0x94>)
 8000f6c:	9801      	ldr	r0, [sp, #4]
 8000f6e:	6813      	ldr	r3, [r2, #0]
 8000f70:	b933      	cbnz	r3, 8000f80 <_free_r+0x30>
 8000f72:	6063      	str	r3, [r4, #4]
 8000f74:	6014      	str	r4, [r2, #0]
 8000f76:	b003      	add	sp, #12
 8000f78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000f7c:	f7ff bedc 	b.w	8000d38 <__malloc_unlock>
 8000f80:	42a3      	cmp	r3, r4
 8000f82:	d908      	bls.n	8000f96 <_free_r+0x46>
 8000f84:	6825      	ldr	r5, [r4, #0]
 8000f86:	1961      	adds	r1, r4, r5
 8000f88:	428b      	cmp	r3, r1
 8000f8a:	bf01      	itttt	eq
 8000f8c:	6819      	ldreq	r1, [r3, #0]
 8000f8e:	685b      	ldreq	r3, [r3, #4]
 8000f90:	1949      	addeq	r1, r1, r5
 8000f92:	6021      	streq	r1, [r4, #0]
 8000f94:	e7ed      	b.n	8000f72 <_free_r+0x22>
 8000f96:	461a      	mov	r2, r3
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	b10b      	cbz	r3, 8000fa0 <_free_r+0x50>
 8000f9c:	42a3      	cmp	r3, r4
 8000f9e:	d9fa      	bls.n	8000f96 <_free_r+0x46>
 8000fa0:	6811      	ldr	r1, [r2, #0]
 8000fa2:	1855      	adds	r5, r2, r1
 8000fa4:	42a5      	cmp	r5, r4
 8000fa6:	d10b      	bne.n	8000fc0 <_free_r+0x70>
 8000fa8:	6824      	ldr	r4, [r4, #0]
 8000faa:	4421      	add	r1, r4
 8000fac:	1854      	adds	r4, r2, r1
 8000fae:	42a3      	cmp	r3, r4
 8000fb0:	6011      	str	r1, [r2, #0]
 8000fb2:	d1e0      	bne.n	8000f76 <_free_r+0x26>
 8000fb4:	681c      	ldr	r4, [r3, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	6053      	str	r3, [r2, #4]
 8000fba:	440c      	add	r4, r1
 8000fbc:	6014      	str	r4, [r2, #0]
 8000fbe:	e7da      	b.n	8000f76 <_free_r+0x26>
 8000fc0:	d902      	bls.n	8000fc8 <_free_r+0x78>
 8000fc2:	230c      	movs	r3, #12
 8000fc4:	6003      	str	r3, [r0, #0]
 8000fc6:	e7d6      	b.n	8000f76 <_free_r+0x26>
 8000fc8:	6825      	ldr	r5, [r4, #0]
 8000fca:	1961      	adds	r1, r4, r5
 8000fcc:	428b      	cmp	r3, r1
 8000fce:	bf04      	itt	eq
 8000fd0:	6819      	ldreq	r1, [r3, #0]
 8000fd2:	685b      	ldreq	r3, [r3, #4]
 8000fd4:	6063      	str	r3, [r4, #4]
 8000fd6:	bf04      	itt	eq
 8000fd8:	1949      	addeq	r1, r1, r5
 8000fda:	6021      	streq	r1, [r4, #0]
 8000fdc:	6054      	str	r4, [r2, #4]
 8000fde:	e7ca      	b.n	8000f76 <_free_r+0x26>
 8000fe0:	b003      	add	sp, #12
 8000fe2:	bd30      	pop	{r4, r5, pc}
 8000fe4:	20000080 	.word	0x20000080

08000fe8 <__sfputc_r>:
 8000fe8:	6893      	ldr	r3, [r2, #8]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	b410      	push	{r4}
 8000ff0:	6093      	str	r3, [r2, #8]
 8000ff2:	da08      	bge.n	8001006 <__sfputc_r+0x1e>
 8000ff4:	6994      	ldr	r4, [r2, #24]
 8000ff6:	42a3      	cmp	r3, r4
 8000ff8:	db01      	blt.n	8000ffe <__sfputc_r+0x16>
 8000ffa:	290a      	cmp	r1, #10
 8000ffc:	d103      	bne.n	8001006 <__sfputc_r+0x1e>
 8000ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001002:	f000 bbb6 	b.w	8001772 <__swbuf_r>
 8001006:	6813      	ldr	r3, [r2, #0]
 8001008:	1c58      	adds	r0, r3, #1
 800100a:	6010      	str	r0, [r2, #0]
 800100c:	7019      	strb	r1, [r3, #0]
 800100e:	4608      	mov	r0, r1
 8001010:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001014:	4770      	bx	lr

08001016 <__sfputs_r>:
 8001016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001018:	4606      	mov	r6, r0
 800101a:	460f      	mov	r7, r1
 800101c:	4614      	mov	r4, r2
 800101e:	18d5      	adds	r5, r2, r3
 8001020:	42ac      	cmp	r4, r5
 8001022:	d101      	bne.n	8001028 <__sfputs_r+0x12>
 8001024:	2000      	movs	r0, #0
 8001026:	e007      	b.n	8001038 <__sfputs_r+0x22>
 8001028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800102c:	463a      	mov	r2, r7
 800102e:	4630      	mov	r0, r6
 8001030:	f7ff ffda 	bl	8000fe8 <__sfputc_r>
 8001034:	1c43      	adds	r3, r0, #1
 8001036:	d1f3      	bne.n	8001020 <__sfputs_r+0xa>
 8001038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800103c <_vfiprintf_r>:
 800103c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001040:	460d      	mov	r5, r1
 8001042:	b09d      	sub	sp, #116	; 0x74
 8001044:	4614      	mov	r4, r2
 8001046:	4698      	mov	r8, r3
 8001048:	4606      	mov	r6, r0
 800104a:	b118      	cbz	r0, 8001054 <_vfiprintf_r+0x18>
 800104c:	6a03      	ldr	r3, [r0, #32]
 800104e:	b90b      	cbnz	r3, 8001054 <_vfiprintf_r+0x18>
 8001050:	f7ff fef2 	bl	8000e38 <__sinit>
 8001054:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001056:	07d9      	lsls	r1, r3, #31
 8001058:	d405      	bmi.n	8001066 <_vfiprintf_r+0x2a>
 800105a:	89ab      	ldrh	r3, [r5, #12]
 800105c:	059a      	lsls	r2, r3, #22
 800105e:	d402      	bmi.n	8001066 <_vfiprintf_r+0x2a>
 8001060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001062:	f7ff ff73 	bl	8000f4c <__retarget_lock_acquire_recursive>
 8001066:	89ab      	ldrh	r3, [r5, #12]
 8001068:	071b      	lsls	r3, r3, #28
 800106a:	d501      	bpl.n	8001070 <_vfiprintf_r+0x34>
 800106c:	692b      	ldr	r3, [r5, #16]
 800106e:	b99b      	cbnz	r3, 8001098 <_vfiprintf_r+0x5c>
 8001070:	4629      	mov	r1, r5
 8001072:	4630      	mov	r0, r6
 8001074:	f000 fbba 	bl	80017ec <__swsetup_r>
 8001078:	b170      	cbz	r0, 8001098 <_vfiprintf_r+0x5c>
 800107a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800107c:	07dc      	lsls	r4, r3, #31
 800107e:	d504      	bpl.n	800108a <_vfiprintf_r+0x4e>
 8001080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001084:	b01d      	add	sp, #116	; 0x74
 8001086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800108a:	89ab      	ldrh	r3, [r5, #12]
 800108c:	0598      	lsls	r0, r3, #22
 800108e:	d4f7      	bmi.n	8001080 <_vfiprintf_r+0x44>
 8001090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001092:	f7ff ff5c 	bl	8000f4e <__retarget_lock_release_recursive>
 8001096:	e7f3      	b.n	8001080 <_vfiprintf_r+0x44>
 8001098:	2300      	movs	r3, #0
 800109a:	9309      	str	r3, [sp, #36]	; 0x24
 800109c:	2320      	movs	r3, #32
 800109e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80010a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80010a6:	2330      	movs	r3, #48	; 0x30
 80010a8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800125c <_vfiprintf_r+0x220>
 80010ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80010b0:	f04f 0901 	mov.w	r9, #1
 80010b4:	4623      	mov	r3, r4
 80010b6:	469a      	mov	sl, r3
 80010b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80010bc:	b10a      	cbz	r2, 80010c2 <_vfiprintf_r+0x86>
 80010be:	2a25      	cmp	r2, #37	; 0x25
 80010c0:	d1f9      	bne.n	80010b6 <_vfiprintf_r+0x7a>
 80010c2:	ebba 0b04 	subs.w	fp, sl, r4
 80010c6:	d00b      	beq.n	80010e0 <_vfiprintf_r+0xa4>
 80010c8:	465b      	mov	r3, fp
 80010ca:	4622      	mov	r2, r4
 80010cc:	4629      	mov	r1, r5
 80010ce:	4630      	mov	r0, r6
 80010d0:	f7ff ffa1 	bl	8001016 <__sfputs_r>
 80010d4:	3001      	adds	r0, #1
 80010d6:	f000 80a9 	beq.w	800122c <_vfiprintf_r+0x1f0>
 80010da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80010dc:	445a      	add	r2, fp
 80010de:	9209      	str	r2, [sp, #36]	; 0x24
 80010e0:	f89a 3000 	ldrb.w	r3, [sl]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 80a1 	beq.w	800122c <_vfiprintf_r+0x1f0>
 80010ea:	2300      	movs	r3, #0
 80010ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80010f4:	f10a 0a01 	add.w	sl, sl, #1
 80010f8:	9304      	str	r3, [sp, #16]
 80010fa:	9307      	str	r3, [sp, #28]
 80010fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001100:	931a      	str	r3, [sp, #104]	; 0x68
 8001102:	4654      	mov	r4, sl
 8001104:	2205      	movs	r2, #5
 8001106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800110a:	4854      	ldr	r0, [pc, #336]	; (800125c <_vfiprintf_r+0x220>)
 800110c:	f7ff f868 	bl	80001e0 <memchr>
 8001110:	9a04      	ldr	r2, [sp, #16]
 8001112:	b9d8      	cbnz	r0, 800114c <_vfiprintf_r+0x110>
 8001114:	06d1      	lsls	r1, r2, #27
 8001116:	bf44      	itt	mi
 8001118:	2320      	movmi	r3, #32
 800111a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800111e:	0713      	lsls	r3, r2, #28
 8001120:	bf44      	itt	mi
 8001122:	232b      	movmi	r3, #43	; 0x2b
 8001124:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001128:	f89a 3000 	ldrb.w	r3, [sl]
 800112c:	2b2a      	cmp	r3, #42	; 0x2a
 800112e:	d015      	beq.n	800115c <_vfiprintf_r+0x120>
 8001130:	9a07      	ldr	r2, [sp, #28]
 8001132:	4654      	mov	r4, sl
 8001134:	2000      	movs	r0, #0
 8001136:	f04f 0c0a 	mov.w	ip, #10
 800113a:	4621      	mov	r1, r4
 800113c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001140:	3b30      	subs	r3, #48	; 0x30
 8001142:	2b09      	cmp	r3, #9
 8001144:	d94d      	bls.n	80011e2 <_vfiprintf_r+0x1a6>
 8001146:	b1b0      	cbz	r0, 8001176 <_vfiprintf_r+0x13a>
 8001148:	9207      	str	r2, [sp, #28]
 800114a:	e014      	b.n	8001176 <_vfiprintf_r+0x13a>
 800114c:	eba0 0308 	sub.w	r3, r0, r8
 8001150:	fa09 f303 	lsl.w	r3, r9, r3
 8001154:	4313      	orrs	r3, r2
 8001156:	9304      	str	r3, [sp, #16]
 8001158:	46a2      	mov	sl, r4
 800115a:	e7d2      	b.n	8001102 <_vfiprintf_r+0xc6>
 800115c:	9b03      	ldr	r3, [sp, #12]
 800115e:	1d19      	adds	r1, r3, #4
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	9103      	str	r1, [sp, #12]
 8001164:	2b00      	cmp	r3, #0
 8001166:	bfbb      	ittet	lt
 8001168:	425b      	neglt	r3, r3
 800116a:	f042 0202 	orrlt.w	r2, r2, #2
 800116e:	9307      	strge	r3, [sp, #28]
 8001170:	9307      	strlt	r3, [sp, #28]
 8001172:	bfb8      	it	lt
 8001174:	9204      	strlt	r2, [sp, #16]
 8001176:	7823      	ldrb	r3, [r4, #0]
 8001178:	2b2e      	cmp	r3, #46	; 0x2e
 800117a:	d10c      	bne.n	8001196 <_vfiprintf_r+0x15a>
 800117c:	7863      	ldrb	r3, [r4, #1]
 800117e:	2b2a      	cmp	r3, #42	; 0x2a
 8001180:	d134      	bne.n	80011ec <_vfiprintf_r+0x1b0>
 8001182:	9b03      	ldr	r3, [sp, #12]
 8001184:	1d1a      	adds	r2, r3, #4
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	9203      	str	r2, [sp, #12]
 800118a:	2b00      	cmp	r3, #0
 800118c:	bfb8      	it	lt
 800118e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001192:	3402      	adds	r4, #2
 8001194:	9305      	str	r3, [sp, #20]
 8001196:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800126c <_vfiprintf_r+0x230>
 800119a:	7821      	ldrb	r1, [r4, #0]
 800119c:	2203      	movs	r2, #3
 800119e:	4650      	mov	r0, sl
 80011a0:	f7ff f81e 	bl	80001e0 <memchr>
 80011a4:	b138      	cbz	r0, 80011b6 <_vfiprintf_r+0x17a>
 80011a6:	9b04      	ldr	r3, [sp, #16]
 80011a8:	eba0 000a 	sub.w	r0, r0, sl
 80011ac:	2240      	movs	r2, #64	; 0x40
 80011ae:	4082      	lsls	r2, r0
 80011b0:	4313      	orrs	r3, r2
 80011b2:	3401      	adds	r4, #1
 80011b4:	9304      	str	r3, [sp, #16]
 80011b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011ba:	4829      	ldr	r0, [pc, #164]	; (8001260 <_vfiprintf_r+0x224>)
 80011bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80011c0:	2206      	movs	r2, #6
 80011c2:	f7ff f80d 	bl	80001e0 <memchr>
 80011c6:	2800      	cmp	r0, #0
 80011c8:	d03f      	beq.n	800124a <_vfiprintf_r+0x20e>
 80011ca:	4b26      	ldr	r3, [pc, #152]	; (8001264 <_vfiprintf_r+0x228>)
 80011cc:	bb1b      	cbnz	r3, 8001216 <_vfiprintf_r+0x1da>
 80011ce:	9b03      	ldr	r3, [sp, #12]
 80011d0:	3307      	adds	r3, #7
 80011d2:	f023 0307 	bic.w	r3, r3, #7
 80011d6:	3308      	adds	r3, #8
 80011d8:	9303      	str	r3, [sp, #12]
 80011da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011dc:	443b      	add	r3, r7
 80011de:	9309      	str	r3, [sp, #36]	; 0x24
 80011e0:	e768      	b.n	80010b4 <_vfiprintf_r+0x78>
 80011e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80011e6:	460c      	mov	r4, r1
 80011e8:	2001      	movs	r0, #1
 80011ea:	e7a6      	b.n	800113a <_vfiprintf_r+0xfe>
 80011ec:	2300      	movs	r3, #0
 80011ee:	3401      	adds	r4, #1
 80011f0:	9305      	str	r3, [sp, #20]
 80011f2:	4619      	mov	r1, r3
 80011f4:	f04f 0c0a 	mov.w	ip, #10
 80011f8:	4620      	mov	r0, r4
 80011fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80011fe:	3a30      	subs	r2, #48	; 0x30
 8001200:	2a09      	cmp	r2, #9
 8001202:	d903      	bls.n	800120c <_vfiprintf_r+0x1d0>
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0c6      	beq.n	8001196 <_vfiprintf_r+0x15a>
 8001208:	9105      	str	r1, [sp, #20]
 800120a:	e7c4      	b.n	8001196 <_vfiprintf_r+0x15a>
 800120c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001210:	4604      	mov	r4, r0
 8001212:	2301      	movs	r3, #1
 8001214:	e7f0      	b.n	80011f8 <_vfiprintf_r+0x1bc>
 8001216:	ab03      	add	r3, sp, #12
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	462a      	mov	r2, r5
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <_vfiprintf_r+0x22c>)
 800121e:	a904      	add	r1, sp, #16
 8001220:	4630      	mov	r0, r6
 8001222:	f3af 8000 	nop.w
 8001226:	4607      	mov	r7, r0
 8001228:	1c78      	adds	r0, r7, #1
 800122a:	d1d6      	bne.n	80011da <_vfiprintf_r+0x19e>
 800122c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800122e:	07d9      	lsls	r1, r3, #31
 8001230:	d405      	bmi.n	800123e <_vfiprintf_r+0x202>
 8001232:	89ab      	ldrh	r3, [r5, #12]
 8001234:	059a      	lsls	r2, r3, #22
 8001236:	d402      	bmi.n	800123e <_vfiprintf_r+0x202>
 8001238:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800123a:	f7ff fe88 	bl	8000f4e <__retarget_lock_release_recursive>
 800123e:	89ab      	ldrh	r3, [r5, #12]
 8001240:	065b      	lsls	r3, r3, #25
 8001242:	f53f af1d 	bmi.w	8001080 <_vfiprintf_r+0x44>
 8001246:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001248:	e71c      	b.n	8001084 <_vfiprintf_r+0x48>
 800124a:	ab03      	add	r3, sp, #12
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	462a      	mov	r2, r5
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <_vfiprintf_r+0x22c>)
 8001252:	a904      	add	r1, sp, #16
 8001254:	4630      	mov	r0, r6
 8001256:	f000 f879 	bl	800134c <_printf_i>
 800125a:	e7e4      	b.n	8001226 <_vfiprintf_r+0x1ea>
 800125c:	08001a4f 	.word	0x08001a4f
 8001260:	08001a59 	.word	0x08001a59
 8001264:	00000000 	.word	0x00000000
 8001268:	08001017 	.word	0x08001017
 800126c:	08001a55 	.word	0x08001a55

08001270 <_printf_common>:
 8001270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001274:	4616      	mov	r6, r2
 8001276:	4699      	mov	r9, r3
 8001278:	688a      	ldr	r2, [r1, #8]
 800127a:	690b      	ldr	r3, [r1, #16]
 800127c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001280:	4293      	cmp	r3, r2
 8001282:	bfb8      	it	lt
 8001284:	4613      	movlt	r3, r2
 8001286:	6033      	str	r3, [r6, #0]
 8001288:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800128c:	4607      	mov	r7, r0
 800128e:	460c      	mov	r4, r1
 8001290:	b10a      	cbz	r2, 8001296 <_printf_common+0x26>
 8001292:	3301      	adds	r3, #1
 8001294:	6033      	str	r3, [r6, #0]
 8001296:	6823      	ldr	r3, [r4, #0]
 8001298:	0699      	lsls	r1, r3, #26
 800129a:	bf42      	ittt	mi
 800129c:	6833      	ldrmi	r3, [r6, #0]
 800129e:	3302      	addmi	r3, #2
 80012a0:	6033      	strmi	r3, [r6, #0]
 80012a2:	6825      	ldr	r5, [r4, #0]
 80012a4:	f015 0506 	ands.w	r5, r5, #6
 80012a8:	d106      	bne.n	80012b8 <_printf_common+0x48>
 80012aa:	f104 0a19 	add.w	sl, r4, #25
 80012ae:	68e3      	ldr	r3, [r4, #12]
 80012b0:	6832      	ldr	r2, [r6, #0]
 80012b2:	1a9b      	subs	r3, r3, r2
 80012b4:	42ab      	cmp	r3, r5
 80012b6:	dc26      	bgt.n	8001306 <_printf_common+0x96>
 80012b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80012bc:	1e13      	subs	r3, r2, #0
 80012be:	6822      	ldr	r2, [r4, #0]
 80012c0:	bf18      	it	ne
 80012c2:	2301      	movne	r3, #1
 80012c4:	0692      	lsls	r2, r2, #26
 80012c6:	d42b      	bmi.n	8001320 <_printf_common+0xb0>
 80012c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80012cc:	4649      	mov	r1, r9
 80012ce:	4638      	mov	r0, r7
 80012d0:	47c0      	blx	r8
 80012d2:	3001      	adds	r0, #1
 80012d4:	d01e      	beq.n	8001314 <_printf_common+0xa4>
 80012d6:	6823      	ldr	r3, [r4, #0]
 80012d8:	6922      	ldr	r2, [r4, #16]
 80012da:	f003 0306 	and.w	r3, r3, #6
 80012de:	2b04      	cmp	r3, #4
 80012e0:	bf02      	ittt	eq
 80012e2:	68e5      	ldreq	r5, [r4, #12]
 80012e4:	6833      	ldreq	r3, [r6, #0]
 80012e6:	1aed      	subeq	r5, r5, r3
 80012e8:	68a3      	ldr	r3, [r4, #8]
 80012ea:	bf0c      	ite	eq
 80012ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80012f0:	2500      	movne	r5, #0
 80012f2:	4293      	cmp	r3, r2
 80012f4:	bfc4      	itt	gt
 80012f6:	1a9b      	subgt	r3, r3, r2
 80012f8:	18ed      	addgt	r5, r5, r3
 80012fa:	2600      	movs	r6, #0
 80012fc:	341a      	adds	r4, #26
 80012fe:	42b5      	cmp	r5, r6
 8001300:	d11a      	bne.n	8001338 <_printf_common+0xc8>
 8001302:	2000      	movs	r0, #0
 8001304:	e008      	b.n	8001318 <_printf_common+0xa8>
 8001306:	2301      	movs	r3, #1
 8001308:	4652      	mov	r2, sl
 800130a:	4649      	mov	r1, r9
 800130c:	4638      	mov	r0, r7
 800130e:	47c0      	blx	r8
 8001310:	3001      	adds	r0, #1
 8001312:	d103      	bne.n	800131c <_printf_common+0xac>
 8001314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800131c:	3501      	adds	r5, #1
 800131e:	e7c6      	b.n	80012ae <_printf_common+0x3e>
 8001320:	18e1      	adds	r1, r4, r3
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	2030      	movs	r0, #48	; 0x30
 8001326:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800132a:	4422      	add	r2, r4
 800132c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001330:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001334:	3302      	adds	r3, #2
 8001336:	e7c7      	b.n	80012c8 <_printf_common+0x58>
 8001338:	2301      	movs	r3, #1
 800133a:	4622      	mov	r2, r4
 800133c:	4649      	mov	r1, r9
 800133e:	4638      	mov	r0, r7
 8001340:	47c0      	blx	r8
 8001342:	3001      	adds	r0, #1
 8001344:	d0e6      	beq.n	8001314 <_printf_common+0xa4>
 8001346:	3601      	adds	r6, #1
 8001348:	e7d9      	b.n	80012fe <_printf_common+0x8e>
	...

0800134c <_printf_i>:
 800134c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001350:	7e0f      	ldrb	r7, [r1, #24]
 8001352:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001354:	2f78      	cmp	r7, #120	; 0x78
 8001356:	4691      	mov	r9, r2
 8001358:	4680      	mov	r8, r0
 800135a:	460c      	mov	r4, r1
 800135c:	469a      	mov	sl, r3
 800135e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001362:	d807      	bhi.n	8001374 <_printf_i+0x28>
 8001364:	2f62      	cmp	r7, #98	; 0x62
 8001366:	d80a      	bhi.n	800137e <_printf_i+0x32>
 8001368:	2f00      	cmp	r7, #0
 800136a:	f000 80d4 	beq.w	8001516 <_printf_i+0x1ca>
 800136e:	2f58      	cmp	r7, #88	; 0x58
 8001370:	f000 80c0 	beq.w	80014f4 <_printf_i+0x1a8>
 8001374:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001378:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800137c:	e03a      	b.n	80013f4 <_printf_i+0xa8>
 800137e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001382:	2b15      	cmp	r3, #21
 8001384:	d8f6      	bhi.n	8001374 <_printf_i+0x28>
 8001386:	a101      	add	r1, pc, #4	; (adr r1, 800138c <_printf_i+0x40>)
 8001388:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800138c:	080013e5 	.word	0x080013e5
 8001390:	080013f9 	.word	0x080013f9
 8001394:	08001375 	.word	0x08001375
 8001398:	08001375 	.word	0x08001375
 800139c:	08001375 	.word	0x08001375
 80013a0:	08001375 	.word	0x08001375
 80013a4:	080013f9 	.word	0x080013f9
 80013a8:	08001375 	.word	0x08001375
 80013ac:	08001375 	.word	0x08001375
 80013b0:	08001375 	.word	0x08001375
 80013b4:	08001375 	.word	0x08001375
 80013b8:	080014fd 	.word	0x080014fd
 80013bc:	08001425 	.word	0x08001425
 80013c0:	080014b7 	.word	0x080014b7
 80013c4:	08001375 	.word	0x08001375
 80013c8:	08001375 	.word	0x08001375
 80013cc:	0800151f 	.word	0x0800151f
 80013d0:	08001375 	.word	0x08001375
 80013d4:	08001425 	.word	0x08001425
 80013d8:	08001375 	.word	0x08001375
 80013dc:	08001375 	.word	0x08001375
 80013e0:	080014bf 	.word	0x080014bf
 80013e4:	682b      	ldr	r3, [r5, #0]
 80013e6:	1d1a      	adds	r2, r3, #4
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	602a      	str	r2, [r5, #0]
 80013ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80013f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80013f4:	2301      	movs	r3, #1
 80013f6:	e09f      	b.n	8001538 <_printf_i+0x1ec>
 80013f8:	6820      	ldr	r0, [r4, #0]
 80013fa:	682b      	ldr	r3, [r5, #0]
 80013fc:	0607      	lsls	r7, r0, #24
 80013fe:	f103 0104 	add.w	r1, r3, #4
 8001402:	6029      	str	r1, [r5, #0]
 8001404:	d501      	bpl.n	800140a <_printf_i+0xbe>
 8001406:	681e      	ldr	r6, [r3, #0]
 8001408:	e003      	b.n	8001412 <_printf_i+0xc6>
 800140a:	0646      	lsls	r6, r0, #25
 800140c:	d5fb      	bpl.n	8001406 <_printf_i+0xba>
 800140e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001412:	2e00      	cmp	r6, #0
 8001414:	da03      	bge.n	800141e <_printf_i+0xd2>
 8001416:	232d      	movs	r3, #45	; 0x2d
 8001418:	4276      	negs	r6, r6
 800141a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800141e:	485a      	ldr	r0, [pc, #360]	; (8001588 <_printf_i+0x23c>)
 8001420:	230a      	movs	r3, #10
 8001422:	e012      	b.n	800144a <_printf_i+0xfe>
 8001424:	682b      	ldr	r3, [r5, #0]
 8001426:	6820      	ldr	r0, [r4, #0]
 8001428:	1d19      	adds	r1, r3, #4
 800142a:	6029      	str	r1, [r5, #0]
 800142c:	0605      	lsls	r5, r0, #24
 800142e:	d501      	bpl.n	8001434 <_printf_i+0xe8>
 8001430:	681e      	ldr	r6, [r3, #0]
 8001432:	e002      	b.n	800143a <_printf_i+0xee>
 8001434:	0641      	lsls	r1, r0, #25
 8001436:	d5fb      	bpl.n	8001430 <_printf_i+0xe4>
 8001438:	881e      	ldrh	r6, [r3, #0]
 800143a:	4853      	ldr	r0, [pc, #332]	; (8001588 <_printf_i+0x23c>)
 800143c:	2f6f      	cmp	r7, #111	; 0x6f
 800143e:	bf0c      	ite	eq
 8001440:	2308      	moveq	r3, #8
 8001442:	230a      	movne	r3, #10
 8001444:	2100      	movs	r1, #0
 8001446:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800144a:	6865      	ldr	r5, [r4, #4]
 800144c:	60a5      	str	r5, [r4, #8]
 800144e:	2d00      	cmp	r5, #0
 8001450:	bfa2      	ittt	ge
 8001452:	6821      	ldrge	r1, [r4, #0]
 8001454:	f021 0104 	bicge.w	r1, r1, #4
 8001458:	6021      	strge	r1, [r4, #0]
 800145a:	b90e      	cbnz	r6, 8001460 <_printf_i+0x114>
 800145c:	2d00      	cmp	r5, #0
 800145e:	d04b      	beq.n	80014f8 <_printf_i+0x1ac>
 8001460:	4615      	mov	r5, r2
 8001462:	fbb6 f1f3 	udiv	r1, r6, r3
 8001466:	fb03 6711 	mls	r7, r3, r1, r6
 800146a:	5dc7      	ldrb	r7, [r0, r7]
 800146c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001470:	4637      	mov	r7, r6
 8001472:	42bb      	cmp	r3, r7
 8001474:	460e      	mov	r6, r1
 8001476:	d9f4      	bls.n	8001462 <_printf_i+0x116>
 8001478:	2b08      	cmp	r3, #8
 800147a:	d10b      	bne.n	8001494 <_printf_i+0x148>
 800147c:	6823      	ldr	r3, [r4, #0]
 800147e:	07de      	lsls	r6, r3, #31
 8001480:	d508      	bpl.n	8001494 <_printf_i+0x148>
 8001482:	6923      	ldr	r3, [r4, #16]
 8001484:	6861      	ldr	r1, [r4, #4]
 8001486:	4299      	cmp	r1, r3
 8001488:	bfde      	ittt	le
 800148a:	2330      	movle	r3, #48	; 0x30
 800148c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001490:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001494:	1b52      	subs	r2, r2, r5
 8001496:	6122      	str	r2, [r4, #16]
 8001498:	f8cd a000 	str.w	sl, [sp]
 800149c:	464b      	mov	r3, r9
 800149e:	aa03      	add	r2, sp, #12
 80014a0:	4621      	mov	r1, r4
 80014a2:	4640      	mov	r0, r8
 80014a4:	f7ff fee4 	bl	8001270 <_printf_common>
 80014a8:	3001      	adds	r0, #1
 80014aa:	d14a      	bne.n	8001542 <_printf_i+0x1f6>
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014b0:	b004      	add	sp, #16
 80014b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014b6:	6823      	ldr	r3, [r4, #0]
 80014b8:	f043 0320 	orr.w	r3, r3, #32
 80014bc:	6023      	str	r3, [r4, #0]
 80014be:	4833      	ldr	r0, [pc, #204]	; (800158c <_printf_i+0x240>)
 80014c0:	2778      	movs	r7, #120	; 0x78
 80014c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80014c6:	6823      	ldr	r3, [r4, #0]
 80014c8:	6829      	ldr	r1, [r5, #0]
 80014ca:	061f      	lsls	r7, r3, #24
 80014cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80014d0:	d402      	bmi.n	80014d8 <_printf_i+0x18c>
 80014d2:	065f      	lsls	r7, r3, #25
 80014d4:	bf48      	it	mi
 80014d6:	b2b6      	uxthmi	r6, r6
 80014d8:	07df      	lsls	r7, r3, #31
 80014da:	bf48      	it	mi
 80014dc:	f043 0320 	orrmi.w	r3, r3, #32
 80014e0:	6029      	str	r1, [r5, #0]
 80014e2:	bf48      	it	mi
 80014e4:	6023      	strmi	r3, [r4, #0]
 80014e6:	b91e      	cbnz	r6, 80014f0 <_printf_i+0x1a4>
 80014e8:	6823      	ldr	r3, [r4, #0]
 80014ea:	f023 0320 	bic.w	r3, r3, #32
 80014ee:	6023      	str	r3, [r4, #0]
 80014f0:	2310      	movs	r3, #16
 80014f2:	e7a7      	b.n	8001444 <_printf_i+0xf8>
 80014f4:	4824      	ldr	r0, [pc, #144]	; (8001588 <_printf_i+0x23c>)
 80014f6:	e7e4      	b.n	80014c2 <_printf_i+0x176>
 80014f8:	4615      	mov	r5, r2
 80014fa:	e7bd      	b.n	8001478 <_printf_i+0x12c>
 80014fc:	682b      	ldr	r3, [r5, #0]
 80014fe:	6826      	ldr	r6, [r4, #0]
 8001500:	6961      	ldr	r1, [r4, #20]
 8001502:	1d18      	adds	r0, r3, #4
 8001504:	6028      	str	r0, [r5, #0]
 8001506:	0635      	lsls	r5, r6, #24
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	d501      	bpl.n	8001510 <_printf_i+0x1c4>
 800150c:	6019      	str	r1, [r3, #0]
 800150e:	e002      	b.n	8001516 <_printf_i+0x1ca>
 8001510:	0670      	lsls	r0, r6, #25
 8001512:	d5fb      	bpl.n	800150c <_printf_i+0x1c0>
 8001514:	8019      	strh	r1, [r3, #0]
 8001516:	2300      	movs	r3, #0
 8001518:	6123      	str	r3, [r4, #16]
 800151a:	4615      	mov	r5, r2
 800151c:	e7bc      	b.n	8001498 <_printf_i+0x14c>
 800151e:	682b      	ldr	r3, [r5, #0]
 8001520:	1d1a      	adds	r2, r3, #4
 8001522:	602a      	str	r2, [r5, #0]
 8001524:	681d      	ldr	r5, [r3, #0]
 8001526:	6862      	ldr	r2, [r4, #4]
 8001528:	2100      	movs	r1, #0
 800152a:	4628      	mov	r0, r5
 800152c:	f7fe fe58 	bl	80001e0 <memchr>
 8001530:	b108      	cbz	r0, 8001536 <_printf_i+0x1ea>
 8001532:	1b40      	subs	r0, r0, r5
 8001534:	6060      	str	r0, [r4, #4]
 8001536:	6863      	ldr	r3, [r4, #4]
 8001538:	6123      	str	r3, [r4, #16]
 800153a:	2300      	movs	r3, #0
 800153c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001540:	e7aa      	b.n	8001498 <_printf_i+0x14c>
 8001542:	6923      	ldr	r3, [r4, #16]
 8001544:	462a      	mov	r2, r5
 8001546:	4649      	mov	r1, r9
 8001548:	4640      	mov	r0, r8
 800154a:	47d0      	blx	sl
 800154c:	3001      	adds	r0, #1
 800154e:	d0ad      	beq.n	80014ac <_printf_i+0x160>
 8001550:	6823      	ldr	r3, [r4, #0]
 8001552:	079b      	lsls	r3, r3, #30
 8001554:	d413      	bmi.n	800157e <_printf_i+0x232>
 8001556:	68e0      	ldr	r0, [r4, #12]
 8001558:	9b03      	ldr	r3, [sp, #12]
 800155a:	4298      	cmp	r0, r3
 800155c:	bfb8      	it	lt
 800155e:	4618      	movlt	r0, r3
 8001560:	e7a6      	b.n	80014b0 <_printf_i+0x164>
 8001562:	2301      	movs	r3, #1
 8001564:	4632      	mov	r2, r6
 8001566:	4649      	mov	r1, r9
 8001568:	4640      	mov	r0, r8
 800156a:	47d0      	blx	sl
 800156c:	3001      	adds	r0, #1
 800156e:	d09d      	beq.n	80014ac <_printf_i+0x160>
 8001570:	3501      	adds	r5, #1
 8001572:	68e3      	ldr	r3, [r4, #12]
 8001574:	9903      	ldr	r1, [sp, #12]
 8001576:	1a5b      	subs	r3, r3, r1
 8001578:	42ab      	cmp	r3, r5
 800157a:	dcf2      	bgt.n	8001562 <_printf_i+0x216>
 800157c:	e7eb      	b.n	8001556 <_printf_i+0x20a>
 800157e:	2500      	movs	r5, #0
 8001580:	f104 0619 	add.w	r6, r4, #25
 8001584:	e7f5      	b.n	8001572 <_printf_i+0x226>
 8001586:	bf00      	nop
 8001588:	08001a60 	.word	0x08001a60
 800158c:	08001a71 	.word	0x08001a71

08001590 <__sflush_r>:
 8001590:	898a      	ldrh	r2, [r1, #12]
 8001592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001596:	4605      	mov	r5, r0
 8001598:	0710      	lsls	r0, r2, #28
 800159a:	460c      	mov	r4, r1
 800159c:	d458      	bmi.n	8001650 <__sflush_r+0xc0>
 800159e:	684b      	ldr	r3, [r1, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	dc05      	bgt.n	80015b0 <__sflush_r+0x20>
 80015a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	dc02      	bgt.n	80015b0 <__sflush_r+0x20>
 80015aa:	2000      	movs	r0, #0
 80015ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80015b2:	2e00      	cmp	r6, #0
 80015b4:	d0f9      	beq.n	80015aa <__sflush_r+0x1a>
 80015b6:	2300      	movs	r3, #0
 80015b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80015bc:	682f      	ldr	r7, [r5, #0]
 80015be:	6a21      	ldr	r1, [r4, #32]
 80015c0:	602b      	str	r3, [r5, #0]
 80015c2:	d032      	beq.n	800162a <__sflush_r+0x9a>
 80015c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80015c6:	89a3      	ldrh	r3, [r4, #12]
 80015c8:	075a      	lsls	r2, r3, #29
 80015ca:	d505      	bpl.n	80015d8 <__sflush_r+0x48>
 80015cc:	6863      	ldr	r3, [r4, #4]
 80015ce:	1ac0      	subs	r0, r0, r3
 80015d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80015d2:	b10b      	cbz	r3, 80015d8 <__sflush_r+0x48>
 80015d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015d6:	1ac0      	subs	r0, r0, r3
 80015d8:	2300      	movs	r3, #0
 80015da:	4602      	mov	r2, r0
 80015dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80015de:	6a21      	ldr	r1, [r4, #32]
 80015e0:	4628      	mov	r0, r5
 80015e2:	47b0      	blx	r6
 80015e4:	1c43      	adds	r3, r0, #1
 80015e6:	89a3      	ldrh	r3, [r4, #12]
 80015e8:	d106      	bne.n	80015f8 <__sflush_r+0x68>
 80015ea:	6829      	ldr	r1, [r5, #0]
 80015ec:	291d      	cmp	r1, #29
 80015ee:	d82b      	bhi.n	8001648 <__sflush_r+0xb8>
 80015f0:	4a29      	ldr	r2, [pc, #164]	; (8001698 <__sflush_r+0x108>)
 80015f2:	410a      	asrs	r2, r1
 80015f4:	07d6      	lsls	r6, r2, #31
 80015f6:	d427      	bmi.n	8001648 <__sflush_r+0xb8>
 80015f8:	2200      	movs	r2, #0
 80015fa:	6062      	str	r2, [r4, #4]
 80015fc:	04d9      	lsls	r1, r3, #19
 80015fe:	6922      	ldr	r2, [r4, #16]
 8001600:	6022      	str	r2, [r4, #0]
 8001602:	d504      	bpl.n	800160e <__sflush_r+0x7e>
 8001604:	1c42      	adds	r2, r0, #1
 8001606:	d101      	bne.n	800160c <__sflush_r+0x7c>
 8001608:	682b      	ldr	r3, [r5, #0]
 800160a:	b903      	cbnz	r3, 800160e <__sflush_r+0x7e>
 800160c:	6560      	str	r0, [r4, #84]	; 0x54
 800160e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001610:	602f      	str	r7, [r5, #0]
 8001612:	2900      	cmp	r1, #0
 8001614:	d0c9      	beq.n	80015aa <__sflush_r+0x1a>
 8001616:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800161a:	4299      	cmp	r1, r3
 800161c:	d002      	beq.n	8001624 <__sflush_r+0x94>
 800161e:	4628      	mov	r0, r5
 8001620:	f7ff fc96 	bl	8000f50 <_free_r>
 8001624:	2000      	movs	r0, #0
 8001626:	6360      	str	r0, [r4, #52]	; 0x34
 8001628:	e7c0      	b.n	80015ac <__sflush_r+0x1c>
 800162a:	2301      	movs	r3, #1
 800162c:	4628      	mov	r0, r5
 800162e:	47b0      	blx	r6
 8001630:	1c41      	adds	r1, r0, #1
 8001632:	d1c8      	bne.n	80015c6 <__sflush_r+0x36>
 8001634:	682b      	ldr	r3, [r5, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0c5      	beq.n	80015c6 <__sflush_r+0x36>
 800163a:	2b1d      	cmp	r3, #29
 800163c:	d001      	beq.n	8001642 <__sflush_r+0xb2>
 800163e:	2b16      	cmp	r3, #22
 8001640:	d101      	bne.n	8001646 <__sflush_r+0xb6>
 8001642:	602f      	str	r7, [r5, #0]
 8001644:	e7b1      	b.n	80015aa <__sflush_r+0x1a>
 8001646:	89a3      	ldrh	r3, [r4, #12]
 8001648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800164c:	81a3      	strh	r3, [r4, #12]
 800164e:	e7ad      	b.n	80015ac <__sflush_r+0x1c>
 8001650:	690f      	ldr	r7, [r1, #16]
 8001652:	2f00      	cmp	r7, #0
 8001654:	d0a9      	beq.n	80015aa <__sflush_r+0x1a>
 8001656:	0793      	lsls	r3, r2, #30
 8001658:	680e      	ldr	r6, [r1, #0]
 800165a:	bf08      	it	eq
 800165c:	694b      	ldreq	r3, [r1, #20]
 800165e:	600f      	str	r7, [r1, #0]
 8001660:	bf18      	it	ne
 8001662:	2300      	movne	r3, #0
 8001664:	eba6 0807 	sub.w	r8, r6, r7
 8001668:	608b      	str	r3, [r1, #8]
 800166a:	f1b8 0f00 	cmp.w	r8, #0
 800166e:	dd9c      	ble.n	80015aa <__sflush_r+0x1a>
 8001670:	6a21      	ldr	r1, [r4, #32]
 8001672:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001674:	4643      	mov	r3, r8
 8001676:	463a      	mov	r2, r7
 8001678:	4628      	mov	r0, r5
 800167a:	47b0      	blx	r6
 800167c:	2800      	cmp	r0, #0
 800167e:	dc06      	bgt.n	800168e <__sflush_r+0xfe>
 8001680:	89a3      	ldrh	r3, [r4, #12]
 8001682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001686:	81a3      	strh	r3, [r4, #12]
 8001688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800168c:	e78e      	b.n	80015ac <__sflush_r+0x1c>
 800168e:	4407      	add	r7, r0
 8001690:	eba8 0800 	sub.w	r8, r8, r0
 8001694:	e7e9      	b.n	800166a <__sflush_r+0xda>
 8001696:	bf00      	nop
 8001698:	dfbffffe 	.word	0xdfbffffe

0800169c <_fflush_r>:
 800169c:	b538      	push	{r3, r4, r5, lr}
 800169e:	690b      	ldr	r3, [r1, #16]
 80016a0:	4605      	mov	r5, r0
 80016a2:	460c      	mov	r4, r1
 80016a4:	b913      	cbnz	r3, 80016ac <_fflush_r+0x10>
 80016a6:	2500      	movs	r5, #0
 80016a8:	4628      	mov	r0, r5
 80016aa:	bd38      	pop	{r3, r4, r5, pc}
 80016ac:	b118      	cbz	r0, 80016b6 <_fflush_r+0x1a>
 80016ae:	6a03      	ldr	r3, [r0, #32]
 80016b0:	b90b      	cbnz	r3, 80016b6 <_fflush_r+0x1a>
 80016b2:	f7ff fbc1 	bl	8000e38 <__sinit>
 80016b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f3      	beq.n	80016a6 <_fflush_r+0xa>
 80016be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80016c0:	07d0      	lsls	r0, r2, #31
 80016c2:	d404      	bmi.n	80016ce <_fflush_r+0x32>
 80016c4:	0599      	lsls	r1, r3, #22
 80016c6:	d402      	bmi.n	80016ce <_fflush_r+0x32>
 80016c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016ca:	f7ff fc3f 	bl	8000f4c <__retarget_lock_acquire_recursive>
 80016ce:	4628      	mov	r0, r5
 80016d0:	4621      	mov	r1, r4
 80016d2:	f7ff ff5d 	bl	8001590 <__sflush_r>
 80016d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80016d8:	07da      	lsls	r2, r3, #31
 80016da:	4605      	mov	r5, r0
 80016dc:	d4e4      	bmi.n	80016a8 <_fflush_r+0xc>
 80016de:	89a3      	ldrh	r3, [r4, #12]
 80016e0:	059b      	lsls	r3, r3, #22
 80016e2:	d4e1      	bmi.n	80016a8 <_fflush_r+0xc>
 80016e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016e6:	f7ff fc32 	bl	8000f4e <__retarget_lock_release_recursive>
 80016ea:	e7dd      	b.n	80016a8 <_fflush_r+0xc>

080016ec <__sread>:
 80016ec:	b510      	push	{r4, lr}
 80016ee:	460c      	mov	r4, r1
 80016f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016f4:	f000 f978 	bl	80019e8 <_read_r>
 80016f8:	2800      	cmp	r0, #0
 80016fa:	bfab      	itete	ge
 80016fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80016fe:	89a3      	ldrhlt	r3, [r4, #12]
 8001700:	181b      	addge	r3, r3, r0
 8001702:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001706:	bfac      	ite	ge
 8001708:	6563      	strge	r3, [r4, #84]	; 0x54
 800170a:	81a3      	strhlt	r3, [r4, #12]
 800170c:	bd10      	pop	{r4, pc}

0800170e <__swrite>:
 800170e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001712:	461f      	mov	r7, r3
 8001714:	898b      	ldrh	r3, [r1, #12]
 8001716:	05db      	lsls	r3, r3, #23
 8001718:	4605      	mov	r5, r0
 800171a:	460c      	mov	r4, r1
 800171c:	4616      	mov	r6, r2
 800171e:	d505      	bpl.n	800172c <__swrite+0x1e>
 8001720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001724:	2302      	movs	r3, #2
 8001726:	2200      	movs	r2, #0
 8001728:	f000 f94c 	bl	80019c4 <_lseek_r>
 800172c:	89a3      	ldrh	r3, [r4, #12]
 800172e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001732:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001736:	81a3      	strh	r3, [r4, #12]
 8001738:	4632      	mov	r2, r6
 800173a:	463b      	mov	r3, r7
 800173c:	4628      	mov	r0, r5
 800173e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001742:	f000 b963 	b.w	8001a0c <_write_r>

08001746 <__sseek>:
 8001746:	b510      	push	{r4, lr}
 8001748:	460c      	mov	r4, r1
 800174a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800174e:	f000 f939 	bl	80019c4 <_lseek_r>
 8001752:	1c43      	adds	r3, r0, #1
 8001754:	89a3      	ldrh	r3, [r4, #12]
 8001756:	bf15      	itete	ne
 8001758:	6560      	strne	r0, [r4, #84]	; 0x54
 800175a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800175e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001762:	81a3      	strheq	r3, [r4, #12]
 8001764:	bf18      	it	ne
 8001766:	81a3      	strhne	r3, [r4, #12]
 8001768:	bd10      	pop	{r4, pc}

0800176a <__sclose>:
 800176a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800176e:	f000 b8f7 	b.w	8001960 <_close_r>

08001772 <__swbuf_r>:
 8001772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001774:	460e      	mov	r6, r1
 8001776:	4614      	mov	r4, r2
 8001778:	4605      	mov	r5, r0
 800177a:	b118      	cbz	r0, 8001784 <__swbuf_r+0x12>
 800177c:	6a03      	ldr	r3, [r0, #32]
 800177e:	b90b      	cbnz	r3, 8001784 <__swbuf_r+0x12>
 8001780:	f7ff fb5a 	bl	8000e38 <__sinit>
 8001784:	69a3      	ldr	r3, [r4, #24]
 8001786:	60a3      	str	r3, [r4, #8]
 8001788:	89a3      	ldrh	r3, [r4, #12]
 800178a:	071a      	lsls	r2, r3, #28
 800178c:	d525      	bpl.n	80017da <__swbuf_r+0x68>
 800178e:	6923      	ldr	r3, [r4, #16]
 8001790:	b31b      	cbz	r3, 80017da <__swbuf_r+0x68>
 8001792:	6823      	ldr	r3, [r4, #0]
 8001794:	6922      	ldr	r2, [r4, #16]
 8001796:	1a98      	subs	r0, r3, r2
 8001798:	6963      	ldr	r3, [r4, #20]
 800179a:	b2f6      	uxtb	r6, r6
 800179c:	4283      	cmp	r3, r0
 800179e:	4637      	mov	r7, r6
 80017a0:	dc04      	bgt.n	80017ac <__swbuf_r+0x3a>
 80017a2:	4621      	mov	r1, r4
 80017a4:	4628      	mov	r0, r5
 80017a6:	f7ff ff79 	bl	800169c <_fflush_r>
 80017aa:	b9e0      	cbnz	r0, 80017e6 <__swbuf_r+0x74>
 80017ac:	68a3      	ldr	r3, [r4, #8]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	60a3      	str	r3, [r4, #8]
 80017b2:	6823      	ldr	r3, [r4, #0]
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	6022      	str	r2, [r4, #0]
 80017b8:	701e      	strb	r6, [r3, #0]
 80017ba:	6962      	ldr	r2, [r4, #20]
 80017bc:	1c43      	adds	r3, r0, #1
 80017be:	429a      	cmp	r2, r3
 80017c0:	d004      	beq.n	80017cc <__swbuf_r+0x5a>
 80017c2:	89a3      	ldrh	r3, [r4, #12]
 80017c4:	07db      	lsls	r3, r3, #31
 80017c6:	d506      	bpl.n	80017d6 <__swbuf_r+0x64>
 80017c8:	2e0a      	cmp	r6, #10
 80017ca:	d104      	bne.n	80017d6 <__swbuf_r+0x64>
 80017cc:	4621      	mov	r1, r4
 80017ce:	4628      	mov	r0, r5
 80017d0:	f7ff ff64 	bl	800169c <_fflush_r>
 80017d4:	b938      	cbnz	r0, 80017e6 <__swbuf_r+0x74>
 80017d6:	4638      	mov	r0, r7
 80017d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017da:	4621      	mov	r1, r4
 80017dc:	4628      	mov	r0, r5
 80017de:	f000 f805 	bl	80017ec <__swsetup_r>
 80017e2:	2800      	cmp	r0, #0
 80017e4:	d0d5      	beq.n	8001792 <__swbuf_r+0x20>
 80017e6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80017ea:	e7f4      	b.n	80017d6 <__swbuf_r+0x64>

080017ec <__swsetup_r>:
 80017ec:	b538      	push	{r3, r4, r5, lr}
 80017ee:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <__swsetup_r+0xac>)
 80017f0:	4605      	mov	r5, r0
 80017f2:	6818      	ldr	r0, [r3, #0]
 80017f4:	460c      	mov	r4, r1
 80017f6:	b118      	cbz	r0, 8001800 <__swsetup_r+0x14>
 80017f8:	6a03      	ldr	r3, [r0, #32]
 80017fa:	b90b      	cbnz	r3, 8001800 <__swsetup_r+0x14>
 80017fc:	f7ff fb1c 	bl	8000e38 <__sinit>
 8001800:	89a3      	ldrh	r3, [r4, #12]
 8001802:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001806:	0718      	lsls	r0, r3, #28
 8001808:	d422      	bmi.n	8001850 <__swsetup_r+0x64>
 800180a:	06d9      	lsls	r1, r3, #27
 800180c:	d407      	bmi.n	800181e <__swsetup_r+0x32>
 800180e:	2309      	movs	r3, #9
 8001810:	602b      	str	r3, [r5, #0]
 8001812:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001816:	81a3      	strh	r3, [r4, #12]
 8001818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800181c:	e034      	b.n	8001888 <__swsetup_r+0x9c>
 800181e:	0758      	lsls	r0, r3, #29
 8001820:	d512      	bpl.n	8001848 <__swsetup_r+0x5c>
 8001822:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001824:	b141      	cbz	r1, 8001838 <__swsetup_r+0x4c>
 8001826:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800182a:	4299      	cmp	r1, r3
 800182c:	d002      	beq.n	8001834 <__swsetup_r+0x48>
 800182e:	4628      	mov	r0, r5
 8001830:	f7ff fb8e 	bl	8000f50 <_free_r>
 8001834:	2300      	movs	r3, #0
 8001836:	6363      	str	r3, [r4, #52]	; 0x34
 8001838:	89a3      	ldrh	r3, [r4, #12]
 800183a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800183e:	81a3      	strh	r3, [r4, #12]
 8001840:	2300      	movs	r3, #0
 8001842:	6063      	str	r3, [r4, #4]
 8001844:	6923      	ldr	r3, [r4, #16]
 8001846:	6023      	str	r3, [r4, #0]
 8001848:	89a3      	ldrh	r3, [r4, #12]
 800184a:	f043 0308 	orr.w	r3, r3, #8
 800184e:	81a3      	strh	r3, [r4, #12]
 8001850:	6923      	ldr	r3, [r4, #16]
 8001852:	b94b      	cbnz	r3, 8001868 <__swsetup_r+0x7c>
 8001854:	89a3      	ldrh	r3, [r4, #12]
 8001856:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800185a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800185e:	d003      	beq.n	8001868 <__swsetup_r+0x7c>
 8001860:	4621      	mov	r1, r4
 8001862:	4628      	mov	r0, r5
 8001864:	f000 f840 	bl	80018e8 <__smakebuf_r>
 8001868:	89a0      	ldrh	r0, [r4, #12]
 800186a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800186e:	f010 0301 	ands.w	r3, r0, #1
 8001872:	d00a      	beq.n	800188a <__swsetup_r+0x9e>
 8001874:	2300      	movs	r3, #0
 8001876:	60a3      	str	r3, [r4, #8]
 8001878:	6963      	ldr	r3, [r4, #20]
 800187a:	425b      	negs	r3, r3
 800187c:	61a3      	str	r3, [r4, #24]
 800187e:	6923      	ldr	r3, [r4, #16]
 8001880:	b943      	cbnz	r3, 8001894 <__swsetup_r+0xa8>
 8001882:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001886:	d1c4      	bne.n	8001812 <__swsetup_r+0x26>
 8001888:	bd38      	pop	{r3, r4, r5, pc}
 800188a:	0781      	lsls	r1, r0, #30
 800188c:	bf58      	it	pl
 800188e:	6963      	ldrpl	r3, [r4, #20]
 8001890:	60a3      	str	r3, [r4, #8]
 8001892:	e7f4      	b.n	800187e <__swsetup_r+0x92>
 8001894:	2000      	movs	r0, #0
 8001896:	e7f7      	b.n	8001888 <__swsetup_r+0x9c>
 8001898:	20000058 	.word	0x20000058

0800189c <__swhatbuf_r>:
 800189c:	b570      	push	{r4, r5, r6, lr}
 800189e:	460c      	mov	r4, r1
 80018a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018a4:	2900      	cmp	r1, #0
 80018a6:	b096      	sub	sp, #88	; 0x58
 80018a8:	4615      	mov	r5, r2
 80018aa:	461e      	mov	r6, r3
 80018ac:	da0d      	bge.n	80018ca <__swhatbuf_r+0x2e>
 80018ae:	89a3      	ldrh	r3, [r4, #12]
 80018b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80018b4:	f04f 0100 	mov.w	r1, #0
 80018b8:	bf0c      	ite	eq
 80018ba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80018be:	2340      	movne	r3, #64	; 0x40
 80018c0:	2000      	movs	r0, #0
 80018c2:	6031      	str	r1, [r6, #0]
 80018c4:	602b      	str	r3, [r5, #0]
 80018c6:	b016      	add	sp, #88	; 0x58
 80018c8:	bd70      	pop	{r4, r5, r6, pc}
 80018ca:	466a      	mov	r2, sp
 80018cc:	f000 f858 	bl	8001980 <_fstat_r>
 80018d0:	2800      	cmp	r0, #0
 80018d2:	dbec      	blt.n	80018ae <__swhatbuf_r+0x12>
 80018d4:	9901      	ldr	r1, [sp, #4]
 80018d6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80018da:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80018de:	4259      	negs	r1, r3
 80018e0:	4159      	adcs	r1, r3
 80018e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018e6:	e7eb      	b.n	80018c0 <__swhatbuf_r+0x24>

080018e8 <__smakebuf_r>:
 80018e8:	898b      	ldrh	r3, [r1, #12]
 80018ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80018ec:	079d      	lsls	r5, r3, #30
 80018ee:	4606      	mov	r6, r0
 80018f0:	460c      	mov	r4, r1
 80018f2:	d507      	bpl.n	8001904 <__smakebuf_r+0x1c>
 80018f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80018f8:	6023      	str	r3, [r4, #0]
 80018fa:	6123      	str	r3, [r4, #16]
 80018fc:	2301      	movs	r3, #1
 80018fe:	6163      	str	r3, [r4, #20]
 8001900:	b002      	add	sp, #8
 8001902:	bd70      	pop	{r4, r5, r6, pc}
 8001904:	ab01      	add	r3, sp, #4
 8001906:	466a      	mov	r2, sp
 8001908:	f7ff ffc8 	bl	800189c <__swhatbuf_r>
 800190c:	9900      	ldr	r1, [sp, #0]
 800190e:	4605      	mov	r5, r0
 8001910:	4630      	mov	r0, r6
 8001912:	f7ff f98b 	bl	8000c2c <_malloc_r>
 8001916:	b948      	cbnz	r0, 800192c <__smakebuf_r+0x44>
 8001918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800191c:	059a      	lsls	r2, r3, #22
 800191e:	d4ef      	bmi.n	8001900 <__smakebuf_r+0x18>
 8001920:	f023 0303 	bic.w	r3, r3, #3
 8001924:	f043 0302 	orr.w	r3, r3, #2
 8001928:	81a3      	strh	r3, [r4, #12]
 800192a:	e7e3      	b.n	80018f4 <__smakebuf_r+0xc>
 800192c:	89a3      	ldrh	r3, [r4, #12]
 800192e:	6020      	str	r0, [r4, #0]
 8001930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001934:	81a3      	strh	r3, [r4, #12]
 8001936:	9b00      	ldr	r3, [sp, #0]
 8001938:	6163      	str	r3, [r4, #20]
 800193a:	9b01      	ldr	r3, [sp, #4]
 800193c:	6120      	str	r0, [r4, #16]
 800193e:	b15b      	cbz	r3, 8001958 <__smakebuf_r+0x70>
 8001940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001944:	4630      	mov	r0, r6
 8001946:	f000 f82d 	bl	80019a4 <_isatty_r>
 800194a:	b128      	cbz	r0, 8001958 <__smakebuf_r+0x70>
 800194c:	89a3      	ldrh	r3, [r4, #12]
 800194e:	f023 0303 	bic.w	r3, r3, #3
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	81a3      	strh	r3, [r4, #12]
 8001958:	89a3      	ldrh	r3, [r4, #12]
 800195a:	431d      	orrs	r5, r3
 800195c:	81a5      	strh	r5, [r4, #12]
 800195e:	e7cf      	b.n	8001900 <__smakebuf_r+0x18>

08001960 <_close_r>:
 8001960:	b538      	push	{r3, r4, r5, lr}
 8001962:	4d06      	ldr	r5, [pc, #24]	; (800197c <_close_r+0x1c>)
 8001964:	2300      	movs	r3, #0
 8001966:	4604      	mov	r4, r0
 8001968:	4608      	mov	r0, r1
 800196a:	602b      	str	r3, [r5, #0]
 800196c:	f7fe fff7 	bl	800095e <_close>
 8001970:	1c43      	adds	r3, r0, #1
 8001972:	d102      	bne.n	800197a <_close_r+0x1a>
 8001974:	682b      	ldr	r3, [r5, #0]
 8001976:	b103      	cbz	r3, 800197a <_close_r+0x1a>
 8001978:	6023      	str	r3, [r4, #0]
 800197a:	bd38      	pop	{r3, r4, r5, pc}
 800197c:	200001c8 	.word	0x200001c8

08001980 <_fstat_r>:
 8001980:	b538      	push	{r3, r4, r5, lr}
 8001982:	4d07      	ldr	r5, [pc, #28]	; (80019a0 <_fstat_r+0x20>)
 8001984:	2300      	movs	r3, #0
 8001986:	4604      	mov	r4, r0
 8001988:	4608      	mov	r0, r1
 800198a:	4611      	mov	r1, r2
 800198c:	602b      	str	r3, [r5, #0]
 800198e:	f7fe fff2 	bl	8000976 <_fstat>
 8001992:	1c43      	adds	r3, r0, #1
 8001994:	d102      	bne.n	800199c <_fstat_r+0x1c>
 8001996:	682b      	ldr	r3, [r5, #0]
 8001998:	b103      	cbz	r3, 800199c <_fstat_r+0x1c>
 800199a:	6023      	str	r3, [r4, #0]
 800199c:	bd38      	pop	{r3, r4, r5, pc}
 800199e:	bf00      	nop
 80019a0:	200001c8 	.word	0x200001c8

080019a4 <_isatty_r>:
 80019a4:	b538      	push	{r3, r4, r5, lr}
 80019a6:	4d06      	ldr	r5, [pc, #24]	; (80019c0 <_isatty_r+0x1c>)
 80019a8:	2300      	movs	r3, #0
 80019aa:	4604      	mov	r4, r0
 80019ac:	4608      	mov	r0, r1
 80019ae:	602b      	str	r3, [r5, #0]
 80019b0:	f7fe fff1 	bl	8000996 <_isatty>
 80019b4:	1c43      	adds	r3, r0, #1
 80019b6:	d102      	bne.n	80019be <_isatty_r+0x1a>
 80019b8:	682b      	ldr	r3, [r5, #0]
 80019ba:	b103      	cbz	r3, 80019be <_isatty_r+0x1a>
 80019bc:	6023      	str	r3, [r4, #0]
 80019be:	bd38      	pop	{r3, r4, r5, pc}
 80019c0:	200001c8 	.word	0x200001c8

080019c4 <_lseek_r>:
 80019c4:	b538      	push	{r3, r4, r5, lr}
 80019c6:	4d07      	ldr	r5, [pc, #28]	; (80019e4 <_lseek_r+0x20>)
 80019c8:	4604      	mov	r4, r0
 80019ca:	4608      	mov	r0, r1
 80019cc:	4611      	mov	r1, r2
 80019ce:	2200      	movs	r2, #0
 80019d0:	602a      	str	r2, [r5, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	f7fe ffea 	bl	80009ac <_lseek>
 80019d8:	1c43      	adds	r3, r0, #1
 80019da:	d102      	bne.n	80019e2 <_lseek_r+0x1e>
 80019dc:	682b      	ldr	r3, [r5, #0]
 80019de:	b103      	cbz	r3, 80019e2 <_lseek_r+0x1e>
 80019e0:	6023      	str	r3, [r4, #0]
 80019e2:	bd38      	pop	{r3, r4, r5, pc}
 80019e4:	200001c8 	.word	0x200001c8

080019e8 <_read_r>:
 80019e8:	b538      	push	{r3, r4, r5, lr}
 80019ea:	4d07      	ldr	r5, [pc, #28]	; (8001a08 <_read_r+0x20>)
 80019ec:	4604      	mov	r4, r0
 80019ee:	4608      	mov	r0, r1
 80019f0:	4611      	mov	r1, r2
 80019f2:	2200      	movs	r2, #0
 80019f4:	602a      	str	r2, [r5, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	f7fe ff78 	bl	80008ec <_read>
 80019fc:	1c43      	adds	r3, r0, #1
 80019fe:	d102      	bne.n	8001a06 <_read_r+0x1e>
 8001a00:	682b      	ldr	r3, [r5, #0]
 8001a02:	b103      	cbz	r3, 8001a06 <_read_r+0x1e>
 8001a04:	6023      	str	r3, [r4, #0]
 8001a06:	bd38      	pop	{r3, r4, r5, pc}
 8001a08:	200001c8 	.word	0x200001c8

08001a0c <_write_r>:
 8001a0c:	b538      	push	{r3, r4, r5, lr}
 8001a0e:	4d07      	ldr	r5, [pc, #28]	; (8001a2c <_write_r+0x20>)
 8001a10:	4604      	mov	r4, r0
 8001a12:	4608      	mov	r0, r1
 8001a14:	4611      	mov	r1, r2
 8001a16:	2200      	movs	r2, #0
 8001a18:	602a      	str	r2, [r5, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	f7fe ff83 	bl	8000926 <_write>
 8001a20:	1c43      	adds	r3, r0, #1
 8001a22:	d102      	bne.n	8001a2a <_write_r+0x1e>
 8001a24:	682b      	ldr	r3, [r5, #0]
 8001a26:	b103      	cbz	r3, 8001a2a <_write_r+0x1e>
 8001a28:	6023      	str	r3, [r4, #0]
 8001a2a:	bd38      	pop	{r3, r4, r5, pc}
 8001a2c:	200001c8 	.word	0x200001c8

08001a30 <_init>:
 8001a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a32:	bf00      	nop
 8001a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a36:	bc08      	pop	{r3}
 8001a38:	469e      	mov	lr, r3
 8001a3a:	4770      	bx	lr

08001a3c <_fini>:
 8001a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a3e:	bf00      	nop
 8001a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a42:	bc08      	pop	{r3}
 8001a44:	469e      	mov	lr, r3
 8001a46:	4770      	bx	lr
