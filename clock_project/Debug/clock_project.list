
clock_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ab8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c50  08000c50  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c50  08000c50  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08000c50  08000c50  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c50  08000c50  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c50  08000c50  00010c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c54  08000c54  00010c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08000c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000050  08000ca8  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08000ca8  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000fd1  00000000  00000000  000200c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000578  00000000  00000000  00021094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  00021610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000c9  00000000  00000000  00021748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000f1ae  00000000  00000000  00021811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000020bd  00000000  00000000  000309bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00053758  00000000  00000000  00032a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000640  00000000  00000000  000861d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00086814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000050 	.word	0x20000050
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000c38 	.word	0x08000c38

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000054 	.word	0x20000054
 80001d4:	08000c38 	.word	0x08000c38

080001d8 <calculate_seconds_rem>:
 * *********************************************/

#include "clock_handler.h"

int calculate_seconds_rem(int s)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
    //logic for remainder of seconds
    return ((int)(s % 60));
 80001e0:	687a      	ldr	r2, [r7, #4]
 80001e2:	4b09      	ldr	r3, [pc, #36]	; (8000208 <calculate_seconds_rem+0x30>)
 80001e4:	fb83 1302 	smull	r1, r3, r3, r2
 80001e8:	4413      	add	r3, r2
 80001ea:	1159      	asrs	r1, r3, #5
 80001ec:	17d3      	asrs	r3, r2, #31
 80001ee:	1ac9      	subs	r1, r1, r3
 80001f0:	460b      	mov	r3, r1
 80001f2:	011b      	lsls	r3, r3, #4
 80001f4:	1a5b      	subs	r3, r3, r1
 80001f6:	009b      	lsls	r3, r3, #2
 80001f8:	1ad1      	subs	r1, r2, r3
 80001fa:	460b      	mov	r3, r1
}
 80001fc:	4618      	mov	r0, r3
 80001fe:	370c      	adds	r7, #12
 8000200:	46bd      	mov	sp, r7
 8000202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000206:	4770      	bx	lr
 8000208:	88888889 	.word	0x88888889

0800020c <calculate_min>:

int calculate_min(int s)
{
 800020c:	b480      	push	{r7}
 800020e:	b083      	sub	sp, #12
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
    //logic for calculating minutes
    return ((int)(s / 60) % 60);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	4a0d      	ldr	r2, [pc, #52]	; (800024c <calculate_min+0x40>)
 8000218:	fb82 1203 	smull	r1, r2, r2, r3
 800021c:	441a      	add	r2, r3
 800021e:	1152      	asrs	r2, r2, #5
 8000220:	17db      	asrs	r3, r3, #31
 8000222:	1ad2      	subs	r2, r2, r3
 8000224:	4b09      	ldr	r3, [pc, #36]	; (800024c <calculate_min+0x40>)
 8000226:	fb83 1302 	smull	r1, r3, r3, r2
 800022a:	4413      	add	r3, r2
 800022c:	1159      	asrs	r1, r3, #5
 800022e:	17d3      	asrs	r3, r2, #31
 8000230:	1ac9      	subs	r1, r1, r3
 8000232:	460b      	mov	r3, r1
 8000234:	011b      	lsls	r3, r3, #4
 8000236:	1a5b      	subs	r3, r3, r1
 8000238:	009b      	lsls	r3, r3, #2
 800023a:	1ad1      	subs	r1, r2, r3
 800023c:	460b      	mov	r3, r1
}
 800023e:	4618      	mov	r0, r3
 8000240:	370c      	adds	r7, #12
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	88888889 	.word	0x88888889

08000250 <main>:


int seconds = 0;

int main()
{
 8000250:	b598      	push	{r3, r4, r7, lr}
 8000252:	af00      	add	r7, sp, #0
    /*Initialize Modules*/
    uart1_tx_init();
 8000254:	f000 fb22 	bl	800089c <uart1_tx_init>
    tim2_1hz_init();
 8000258:	f000 fafa 	bl	8000850 <tim2_1hz_init>
    shift_reg_init();
 800025c:	f000 f828 	bl	80002b0 <shift_reg_init>

    while (1)
    {
        /*Forever Loop*/
        while(!(TIM2->SR & SR_UIF)){}
 8000260:	bf00      	nop
 8000262:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000266:	691b      	ldr	r3, [r3, #16]
 8000268:	f003 0301 	and.w	r3, r3, #1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d0f8      	beq.n	8000262 <main+0x12>
        TIM2->SR &= ~SR_UIF;
 8000270:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000274:	691b      	ldr	r3, [r3, #16]
 8000276:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800027a:	f023 0301 	bic.w	r3, r3, #1
 800027e:	6113      	str	r3, [r2, #16]
        
        seconds++;
 8000280:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <main+0x5c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	3301      	adds	r3, #1
 8000286:	4a09      	ldr	r2, [pc, #36]	; (80002ac <main+0x5c>)
 8000288:	6013      	str	r3, [r2, #0]
        display_handler(calculate_min(seconds), calculate_seconds_rem(seconds));
 800028a:	4b08      	ldr	r3, [pc, #32]	; (80002ac <main+0x5c>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4618      	mov	r0, r3
 8000290:	f7ff ffbc 	bl	800020c <calculate_min>
 8000294:	4604      	mov	r4, r0
 8000296:	4b05      	ldr	r3, [pc, #20]	; (80002ac <main+0x5c>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4618      	mov	r0, r3
 800029c:	f7ff ff9c 	bl	80001d8 <calculate_seconds_rem>
 80002a0:	4603      	mov	r3, r0
 80002a2:	4619      	mov	r1, r3
 80002a4:	4620      	mov	r0, r4
 80002a6:	f000 f821 	bl	80002ec <display_handler>
        while(!(TIM2->SR & SR_UIF)){}
 80002aa:	e7d9      	b.n	8000260 <main+0x10>
 80002ac:	2000006c 	.word	0x2000006c

080002b0 <shift_reg_init>:
// Probably should try to use timer interrupts to 
// program all of these. 


void shift_reg_init()
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
    // initialize GPIO pins
    RCC->AHB1ENR |= GPIOAEN;
 80002b4:	4b09      	ldr	r3, [pc, #36]	; (80002dc <shift_reg_init+0x2c>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b8:	4a08      	ldr	r2, [pc, #32]	; (80002dc <shift_reg_init+0x2c>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOA->MODER |= (1U<<24 | 1U<<22 | 1U<<14 | 
 80002c0:	4b07      	ldr	r3, [pc, #28]	; (80002e0 <shift_reg_init+0x30>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4906      	ldr	r1, [pc, #24]	; (80002e0 <shift_reg_init+0x30>)
 80002c6:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <shift_reg_init+0x34>)
 80002c8:	4313      	orrs	r3, r2
 80002ca:	600b      	str	r3, [r1, #0]
                    1U<<12 | 1U<<10 | 1U<<8 | 
                    1U<<6 | 1U<<4 | 1U<<2); 
    GPIOA->BSRR = (ENABLE_PIN | SR_CLR); 
 80002cc:	4b04      	ldr	r3, [pc, #16]	; (80002e0 <shift_reg_init+0x30>)
 80002ce:	4a06      	ldr	r2, [pc, #24]	; (80002e8 <shift_reg_init+0x38>)
 80002d0:	619a      	str	r2, [r3, #24]
    //sn74hc595n
}
 80002d2:	bf00      	nop
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	40023800 	.word	0x40023800
 80002e0:	40020000 	.word	0x40020000
 80002e4:	01405554 	.word	0x01405554
 80002e8:	00801000 	.word	0x00801000

080002ec <display_handler>:
void display_handler(int m, int s)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b08a      	sub	sp, #40	; 0x28
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]
    int bit_array[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 80002f6:	f107 0308 	add.w	r3, r7, #8
 80002fa:	2220      	movs	r2, #32
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 fc0a 	bl	8000b18 <memset>
    
    // Program Digit1
    if (m > 9)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2b09      	cmp	r3, #9
 8000308:	dd14      	ble.n	8000334 <display_handler+0x48>
    {
        GPIOA->BSRR = DIGIT_ONE;
 800030a:	4b31      	ldr	r3, [pc, #196]	; (80003d0 <display_handler+0xe4>)
 800030c:	4a31      	ldr	r2, [pc, #196]	; (80003d4 <display_handler+0xe8>)
 800030e:	619a      	str	r2, [r3, #24]
        set_bit_array(bit_array, ((int)(m / 10)));
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	4a31      	ldr	r2, [pc, #196]	; (80003d8 <display_handler+0xec>)
 8000314:	fb82 1203 	smull	r1, r2, r2, r3
 8000318:	1092      	asrs	r2, r2, #2
 800031a:	17db      	asrs	r3, r3, #31
 800031c:	1ad2      	subs	r2, r2, r3
 800031e:	f107 0308 	add.w	r3, r7, #8
 8000322:	4611      	mov	r1, r2
 8000324:	4618      	mov	r0, r3
 8000326:	f000 f85f 	bl	80003e8 <set_bit_array>
        send_8_bits(bit_array);
 800032a:	f107 0308 	add.w	r3, r7, #8
 800032e:	4618      	mov	r0, r3
 8000330:	f000 fa10 	bl	8000754 <send_8_bits>
    }

    // Program Digit2
    GPIOA->BSRR = DIGIT_TWO;
 8000334:	4b26      	ldr	r3, [pc, #152]	; (80003d0 <display_handler+0xe4>)
 8000336:	4a29      	ldr	r2, [pc, #164]	; (80003dc <display_handler+0xf0>)
 8000338:	619a      	str	r2, [r3, #24]
    set_bit_array(bit_array, (m % 10));
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <display_handler+0xec>)
 800033e:	fb83 1302 	smull	r1, r3, r3, r2
 8000342:	1099      	asrs	r1, r3, #2
 8000344:	17d3      	asrs	r3, r2, #31
 8000346:	1ac9      	subs	r1, r1, r3
 8000348:	460b      	mov	r3, r1
 800034a:	009b      	lsls	r3, r3, #2
 800034c:	440b      	add	r3, r1
 800034e:	005b      	lsls	r3, r3, #1
 8000350:	1ad1      	subs	r1, r2, r3
 8000352:	f107 0308 	add.w	r3, r7, #8
 8000356:	4618      	mov	r0, r3
 8000358:	f000 f846 	bl	80003e8 <set_bit_array>
    send_8_bits(bit_array);
 800035c:	f107 0308 	add.w	r3, r7, #8
 8000360:	4618      	mov	r0, r3
 8000362:	f000 f9f7 	bl	8000754 <send_8_bits>

    // Program Digit3
    if(s > 9)
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	2b09      	cmp	r3, #9
 800036a:	dd14      	ble.n	8000396 <display_handler+0xaa>
    {
        GPIOA->BSRR = DIGIT_THREE;
 800036c:	4b18      	ldr	r3, [pc, #96]	; (80003d0 <display_handler+0xe4>)
 800036e:	4a1c      	ldr	r2, [pc, #112]	; (80003e0 <display_handler+0xf4>)
 8000370:	619a      	str	r2, [r3, #24]
        set_bit_array(bit_array, ((int)(s / 10)));
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	4a18      	ldr	r2, [pc, #96]	; (80003d8 <display_handler+0xec>)
 8000376:	fb82 1203 	smull	r1, r2, r2, r3
 800037a:	1092      	asrs	r2, r2, #2
 800037c:	17db      	asrs	r3, r3, #31
 800037e:	1ad2      	subs	r2, r2, r3
 8000380:	f107 0308 	add.w	r3, r7, #8
 8000384:	4611      	mov	r1, r2
 8000386:	4618      	mov	r0, r3
 8000388:	f000 f82e 	bl	80003e8 <set_bit_array>
        send_8_bits(bit_array);
 800038c:	f107 0308 	add.w	r3, r7, #8
 8000390:	4618      	mov	r0, r3
 8000392:	f000 f9df 	bl	8000754 <send_8_bits>
    }

    // Program Digit4
    GPIOA->BSRR = DIGIT_FOUR;
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <display_handler+0xe4>)
 8000398:	4a12      	ldr	r2, [pc, #72]	; (80003e4 <display_handler+0xf8>)
 800039a:	619a      	str	r2, [r3, #24]
    set_bit_array(bit_array, (s % 10));
 800039c:	683a      	ldr	r2, [r7, #0]
 800039e:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <display_handler+0xec>)
 80003a0:	fb83 1302 	smull	r1, r3, r3, r2
 80003a4:	1099      	asrs	r1, r3, #2
 80003a6:	17d3      	asrs	r3, r2, #31
 80003a8:	1ac9      	subs	r1, r1, r3
 80003aa:	460b      	mov	r3, r1
 80003ac:	009b      	lsls	r3, r3, #2
 80003ae:	440b      	add	r3, r1
 80003b0:	005b      	lsls	r3, r3, #1
 80003b2:	1ad1      	subs	r1, r2, r3
 80003b4:	f107 0308 	add.w	r3, r7, #8
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 f815 	bl	80003e8 <set_bit_array>
    send_8_bits(bit_array);
 80003be:	f107 0308 	add.w	r3, r7, #8
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 f9c6 	bl	8000754 <send_8_bits>

}
 80003c8:	bf00      	nop
 80003ca:	3728      	adds	r7, #40	; 0x28
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	40020000 	.word	0x40020000
 80003d4:	001c0002 	.word	0x001c0002
 80003d8:	66666667 	.word	0x66666667
 80003dc:	001a0004 	.word	0x001a0004
 80003e0:	00160008 	.word	0x00160008
 80003e4:	000e0010 	.word	0x000e0010

080003e8 <set_bit_array>:

void set_bit_array(int bit_array[],int time)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
    // sets bit_array for digit in switch statement, according
    // to 7 segment display segments.
    int* p = (int*)malloc(8 * sizeof(int));
 80003f2:	2020      	movs	r0, #32
 80003f4:	f000 fad4 	bl	80009a0 <malloc>
 80003f8:	4603      	mov	r3, r0
 80003fa:	60fb      	str	r3, [r7, #12]
    p = bit_array;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	60fb      	str	r3, [r7, #12]
    switch(time)
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	f200 819e 	bhi.w	8000744 <set_bit_array+0x35c>
 8000408:	a201      	add	r2, pc, #4	; (adr r2, 8000410 <set_bit_array+0x28>)
 800040a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800040e:	bf00      	nop
 8000410:	08000439 	.word	0x08000439
 8000414:	08000487 	.word	0x08000487
 8000418:	080004d5 	.word	0x080004d5
 800041c:	08000523 	.word	0x08000523
 8000420:	08000571 	.word	0x08000571
 8000424:	080005bf 	.word	0x080005bf
 8000428:	0800060d 	.word	0x0800060d
 800042c:	0800065b 	.word	0x0800065b
 8000430:	080006a9 	.word	0x080006a9
 8000434:	080006f7 	.word	0x080006f7
    {
        case 0:
            *p++ = 1; *p++ = 1; *p++ = 1; *p++ = 1;
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	1d1a      	adds	r2, r3, #4
 800043c:	60fa      	str	r2, [r7, #12]
 800043e:	2201      	movs	r2, #1
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	1d1a      	adds	r2, r3, #4
 8000446:	60fa      	str	r2, [r7, #12]
 8000448:	2201      	movs	r2, #1
 800044a:	601a      	str	r2, [r3, #0]
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	1d1a      	adds	r2, r3, #4
 8000450:	60fa      	str	r2, [r7, #12]
 8000452:	2201      	movs	r2, #1
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	1d1a      	adds	r2, r3, #4
 800045a:	60fa      	str	r2, [r7, #12]
 800045c:	2201      	movs	r2, #1
 800045e:	601a      	str	r2, [r3, #0]
            *p++ = 1; *p++ = 1; *p++ = 0; *p = 0;
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	1d1a      	adds	r2, r3, #4
 8000464:	60fa      	str	r2, [r7, #12]
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	1d1a      	adds	r2, r3, #4
 800046e:	60fa      	str	r2, [r7, #12]
 8000470:	2201      	movs	r2, #1
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	1d1a      	adds	r2, r3, #4
 8000478:	60fa      	str	r2, [r7, #12]
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
            break;
 8000484:	e15e      	b.n	8000744 <set_bit_array+0x35c>
        case 1:
            *p++ = 0; *p++ = 1; *p++ = 1; *p++ = 0; 
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	1d1a      	adds	r2, r3, #4
 800048a:	60fa      	str	r2, [r7, #12]
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	1d1a      	adds	r2, r3, #4
 8000494:	60fa      	str	r2, [r7, #12]
 8000496:	2201      	movs	r2, #1
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	1d1a      	adds	r2, r3, #4
 800049e:	60fa      	str	r2, [r7, #12]
 80004a0:	2201      	movs	r2, #1
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	1d1a      	adds	r2, r3, #4
 80004a8:	60fa      	str	r2, [r7, #12]
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
            *p++ = 0; *p++ = 0; *p++ = 0; *p = 0;
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	1d1a      	adds	r2, r3, #4
 80004b2:	60fa      	str	r2, [r7, #12]
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	1d1a      	adds	r2, r3, #4
 80004bc:	60fa      	str	r2, [r7, #12]
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	1d1a      	adds	r2, r3, #4
 80004c6:	60fa      	str	r2, [r7, #12]
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
            break;
 80004d2:	e137      	b.n	8000744 <set_bit_array+0x35c>
        case 2:
            *p++ = 1; *p++ = 1; *p++ = 0; *p++ = 1;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	1d1a      	adds	r2, r3, #4
 80004d8:	60fa      	str	r2, [r7, #12]
 80004da:	2201      	movs	r2, #1
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	1d1a      	adds	r2, r3, #4
 80004e2:	60fa      	str	r2, [r7, #12]
 80004e4:	2201      	movs	r2, #1
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	1d1a      	adds	r2, r3, #4
 80004ec:	60fa      	str	r2, [r7, #12]
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	1d1a      	adds	r2, r3, #4
 80004f6:	60fa      	str	r2, [r7, #12]
 80004f8:	2201      	movs	r2, #1
 80004fa:	601a      	str	r2, [r3, #0]
            *p++ = 1; *p++ = 0; *p++ = 1; *p = 0;
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	1d1a      	adds	r2, r3, #4
 8000500:	60fa      	str	r2, [r7, #12]
 8000502:	2201      	movs	r2, #1
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	1d1a      	adds	r2, r3, #4
 800050a:	60fa      	str	r2, [r7, #12]
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	1d1a      	adds	r2, r3, #4
 8000514:	60fa      	str	r2, [r7, #12]
 8000516:	2201      	movs	r2, #1
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
            break;
 8000520:	e110      	b.n	8000744 <set_bit_array+0x35c>
        case 3:
            *p++ = 1; *p++ = 1; *p++ = 1; *p++ = 1;
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	1d1a      	adds	r2, r3, #4
 8000526:	60fa      	str	r2, [r7, #12]
 8000528:	2201      	movs	r2, #1
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	1d1a      	adds	r2, r3, #4
 8000530:	60fa      	str	r2, [r7, #12]
 8000532:	2201      	movs	r2, #1
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	1d1a      	adds	r2, r3, #4
 800053a:	60fa      	str	r2, [r7, #12]
 800053c:	2201      	movs	r2, #1
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	1d1a      	adds	r2, r3, #4
 8000544:	60fa      	str	r2, [r7, #12]
 8000546:	2201      	movs	r2, #1
 8000548:	601a      	str	r2, [r3, #0]
            *p++ = 0; *p++ = 0; *p++ = 1; *p = 0;
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	1d1a      	adds	r2, r3, #4
 800054e:	60fa      	str	r2, [r7, #12]
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	1d1a      	adds	r2, r3, #4
 8000558:	60fa      	str	r2, [r7, #12]
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	1d1a      	adds	r2, r3, #4
 8000562:	60fa      	str	r2, [r7, #12]
 8000564:	2201      	movs	r2, #1
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
            break;
 800056e:	e0e9      	b.n	8000744 <set_bit_array+0x35c>
        case 4:
            *p++ = 0; *p++ = 1; *p++ = 1; *p++ = 0;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	1d1a      	adds	r2, r3, #4
 8000574:	60fa      	str	r2, [r7, #12]
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	1d1a      	adds	r2, r3, #4
 800057e:	60fa      	str	r2, [r7, #12]
 8000580:	2201      	movs	r2, #1
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	1d1a      	adds	r2, r3, #4
 8000588:	60fa      	str	r2, [r7, #12]
 800058a:	2201      	movs	r2, #1
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	1d1a      	adds	r2, r3, #4
 8000592:	60fa      	str	r2, [r7, #12]
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
            *p++ = 0; *p++ = 1; *p++ = 1; *p = 0;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	1d1a      	adds	r2, r3, #4
 800059c:	60fa      	str	r2, [r7, #12]
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	1d1a      	adds	r2, r3, #4
 80005a6:	60fa      	str	r2, [r7, #12]
 80005a8:	2201      	movs	r2, #1
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	1d1a      	adds	r2, r3, #4
 80005b0:	60fa      	str	r2, [r7, #12]
 80005b2:	2201      	movs	r2, #1
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
            break;
 80005bc:	e0c2      	b.n	8000744 <set_bit_array+0x35c>
        case 5:
            *p++ = 1; *p++ = 0; *p++ = 1; *p++ = 1;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	1d1a      	adds	r2, r3, #4
 80005c2:	60fa      	str	r2, [r7, #12]
 80005c4:	2201      	movs	r2, #1
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	1d1a      	adds	r2, r3, #4
 80005cc:	60fa      	str	r2, [r7, #12]
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	1d1a      	adds	r2, r3, #4
 80005d6:	60fa      	str	r2, [r7, #12]
 80005d8:	2201      	movs	r2, #1
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	1d1a      	adds	r2, r3, #4
 80005e0:	60fa      	str	r2, [r7, #12]
 80005e2:	2201      	movs	r2, #1
 80005e4:	601a      	str	r2, [r3, #0]
            *p++ = 0; *p++ = 1; *p++ = 1; *p = 0;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	1d1a      	adds	r2, r3, #4
 80005ea:	60fa      	str	r2, [r7, #12]
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	1d1a      	adds	r2, r3, #4
 80005f4:	60fa      	str	r2, [r7, #12]
 80005f6:	2201      	movs	r2, #1
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	1d1a      	adds	r2, r3, #4
 80005fe:	60fa      	str	r2, [r7, #12]
 8000600:	2201      	movs	r2, #1
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
            break;
 800060a:	e09b      	b.n	8000744 <set_bit_array+0x35c>
        case 6:
            *p++ = 1; *p++ = 0; *p++ = 1; *p++ = 1;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	1d1a      	adds	r2, r3, #4
 8000610:	60fa      	str	r2, [r7, #12]
 8000612:	2201      	movs	r2, #1
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	1d1a      	adds	r2, r3, #4
 800061a:	60fa      	str	r2, [r7, #12]
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	1d1a      	adds	r2, r3, #4
 8000624:	60fa      	str	r2, [r7, #12]
 8000626:	2201      	movs	r2, #1
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	1d1a      	adds	r2, r3, #4
 800062e:	60fa      	str	r2, [r7, #12]
 8000630:	2201      	movs	r2, #1
 8000632:	601a      	str	r2, [r3, #0]
            *p++ = 1; *p++ = 1; *p++ = 1; *p = 0;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	1d1a      	adds	r2, r3, #4
 8000638:	60fa      	str	r2, [r7, #12]
 800063a:	2201      	movs	r2, #1
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	1d1a      	adds	r2, r3, #4
 8000642:	60fa      	str	r2, [r7, #12]
 8000644:	2201      	movs	r2, #1
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	1d1a      	adds	r2, r3, #4
 800064c:	60fa      	str	r2, [r7, #12]
 800064e:	2201      	movs	r2, #1
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
            break;
 8000658:	e074      	b.n	8000744 <set_bit_array+0x35c>
        case 7:
            *p++ = 1; *p++ = 1; *p++ = 1; *p++ = 0;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	1d1a      	adds	r2, r3, #4
 800065e:	60fa      	str	r2, [r7, #12]
 8000660:	2201      	movs	r2, #1
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	1d1a      	adds	r2, r3, #4
 8000668:	60fa      	str	r2, [r7, #12]
 800066a:	2201      	movs	r2, #1
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	1d1a      	adds	r2, r3, #4
 8000672:	60fa      	str	r2, [r7, #12]
 8000674:	2201      	movs	r2, #1
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	1d1a      	adds	r2, r3, #4
 800067c:	60fa      	str	r2, [r7, #12]
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
            *p++ = 0; *p++ = 0; *p++ = 0; *p = 0;
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	1d1a      	adds	r2, r3, #4
 8000686:	60fa      	str	r2, [r7, #12]
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	1d1a      	adds	r2, r3, #4
 8000690:	60fa      	str	r2, [r7, #12]
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	1d1a      	adds	r2, r3, #4
 800069a:	60fa      	str	r2, [r7, #12]
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
            break;
 80006a6:	e04d      	b.n	8000744 <set_bit_array+0x35c>
        case 8:
            *p++ = 1; *p++ = 1; *p++ = 1; *p++ = 1;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	1d1a      	adds	r2, r3, #4
 80006ac:	60fa      	str	r2, [r7, #12]
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	1d1a      	adds	r2, r3, #4
 80006b6:	60fa      	str	r2, [r7, #12]
 80006b8:	2201      	movs	r2, #1
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	1d1a      	adds	r2, r3, #4
 80006c0:	60fa      	str	r2, [r7, #12]
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	1d1a      	adds	r2, r3, #4
 80006ca:	60fa      	str	r2, [r7, #12]
 80006cc:	2201      	movs	r2, #1
 80006ce:	601a      	str	r2, [r3, #0]
            *p++ = 1; *p++ = 1; *p++ = 1; *p = 0;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	1d1a      	adds	r2, r3, #4
 80006d4:	60fa      	str	r2, [r7, #12]
 80006d6:	2201      	movs	r2, #1
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	1d1a      	adds	r2, r3, #4
 80006de:	60fa      	str	r2, [r7, #12]
 80006e0:	2201      	movs	r2, #1
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	1d1a      	adds	r2, r3, #4
 80006e8:	60fa      	str	r2, [r7, #12]
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
            break;
 80006f4:	e026      	b.n	8000744 <set_bit_array+0x35c>
        case 9:
            *p++ = 1; *p++ = 1; *p++ = 1; *p++ = 0;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	1d1a      	adds	r2, r3, #4
 80006fa:	60fa      	str	r2, [r7, #12]
 80006fc:	2201      	movs	r2, #1
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	1d1a      	adds	r2, r3, #4
 8000704:	60fa      	str	r2, [r7, #12]
 8000706:	2201      	movs	r2, #1
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	1d1a      	adds	r2, r3, #4
 800070e:	60fa      	str	r2, [r7, #12]
 8000710:	2201      	movs	r2, #1
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	1d1a      	adds	r2, r3, #4
 8000718:	60fa      	str	r2, [r7, #12]
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
            *p++ = 0; *p++ = 1; *p++ = 1; *p = 0;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	1d1a      	adds	r2, r3, #4
 8000722:	60fa      	str	r2, [r7, #12]
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	1d1a      	adds	r2, r3, #4
 800072c:	60fa      	str	r2, [r7, #12]
 800072e:	2201      	movs	r2, #1
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	1d1a      	adds	r2, r3, #4
 8000736:	60fa      	str	r2, [r7, #12]
 8000738:	2201      	movs	r2, #1
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
            break;
 8000742:	bf00      	nop
    }
    free(p); //deallocate pointer
 8000744:	68f8      	ldr	r0, [r7, #12]
 8000746:	f000 f933 	bl	80009b0 <free>
}
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop

08000754 <send_8_bits>:
void send_8_bits(int bit_array[])
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < 8; i++)
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	e013      	b.n	800078a <send_8_bits+0x36>
    {
        //loop through and set pin data
        if (bit_array[i] == 1)
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	4413      	add	r3, r2
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d103      	bne.n	8000778 <send_8_bits+0x24>
        {
            GPIOA->BSRR = DATA_PIN_ON;
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <send_8_bits+0x48>)
 8000772:	2220      	movs	r2, #32
 8000774:	619a      	str	r2, [r3, #24]
 8000776:	e003      	b.n	8000780 <send_8_bits+0x2c>
        }
        else
        {
            GPIOA->BSRR = DATA_PIN_OFF;
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <send_8_bits+0x48>)
 800077a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800077e:	619a      	str	r2, [r3, #24]
        }
        //pulse clock
        pulse_clock();
 8000780:	f000 f80e 	bl	80007a0 <pulse_clock>
    for(int i = 0; i < 8; i++)
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	3301      	adds	r3, #1
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	2b07      	cmp	r3, #7
 800078e:	dde8      	ble.n	8000762 <send_8_bits+0xe>
    }
    //pulse latch to catch
    pulse_latch();
 8000790:	f000 f818 	bl	80007c4 <pulse_latch>
}
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40020000 	.word	0x40020000

080007a0 <pulse_clock>:

void pulse_clock()
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
    // clock on / clock off
    GPIOA->BSRR = SR_CLOCK_ON;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <pulse_clock+0x20>)
 80007a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007aa:	619a      	str	r2, [r3, #24]
    GPIOA->BSRR = SR_CLOCK_OFF;
 80007ac:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <pulse_clock+0x20>)
 80007ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007b2:	619a      	str	r2, [r3, #24]
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40020000 	.word	0x40020000

080007c4 <pulse_latch>:

void pulse_latch()
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
    // latch on / latch off
    GPIOA->BSRR = LATCH_ON;
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <pulse_latch+0x1c>)
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	619a      	str	r2, [r3, #24]
    GPIOA->BSRR = LATCH_OFF;
 80007ce:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <pulse_latch+0x1c>)
 80007d0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007d4:	619a      	str	r2, [r3, #24]
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	40020000 	.word	0x40020000

080007e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007ec:	4a14      	ldr	r2, [pc, #80]	; (8000840 <_sbrk+0x5c>)
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <_sbrk+0x60>)
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007f8:	4b13      	ldr	r3, [pc, #76]	; (8000848 <_sbrk+0x64>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d102      	bne.n	8000806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <_sbrk+0x64>)
 8000802:	4a12      	ldr	r2, [pc, #72]	; (800084c <_sbrk+0x68>)
 8000804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <_sbrk+0x64>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	693a      	ldr	r2, [r7, #16]
 8000810:	429a      	cmp	r2, r3
 8000812:	d207      	bcs.n	8000824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000814:	f000 f998 	bl	8000b48 <__errno>
 8000818:	4603      	mov	r3, r0
 800081a:	220c      	movs	r2, #12
 800081c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800081e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000822:	e009      	b.n	8000838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <_sbrk+0x64>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800082a:	4b07      	ldr	r3, [pc, #28]	; (8000848 <_sbrk+0x64>)
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4413      	add	r3, r2
 8000832:	4a05      	ldr	r2, [pc, #20]	; (8000848 <_sbrk+0x64>)
 8000834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000836:	68fb      	ldr	r3, [r7, #12]
}
 8000838:	4618      	mov	r0, r3
 800083a:	3718      	adds	r7, #24
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20020000 	.word	0x20020000
 8000844:	00000400 	.word	0x00000400
 8000848:	20000070 	.word	0x20000070
 800084c:	200001c0 	.word	0x200001c0

08000850 <tim2_1hz_init>:
           
#define TIM2EN              (1U<<0) // APB1ENR
#define CR1_CEN             (1U<<0)

void tim2_1hz_init()
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
    /*****Configure Timer to 1 Hz*****/
    RCC->APB1ENR |= TIM2EN;
 8000854:	4b10      	ldr	r3, [pc, #64]	; (8000898 <tim2_1hz_init+0x48>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	4a0f      	ldr	r2, [pc, #60]	; (8000898 <tim2_1hz_init+0x48>)
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	6413      	str	r3, [r2, #64]	; 0x40
    TIM2->PSC = 1600 - 1;
 8000860:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000864:	f240 623f 	movw	r2, #1599	; 0x63f
 8000868:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 10000 - 1;
 800086a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800086e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CNT = 0;
 8000874:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000878:	2200      	movs	r2, #0
 800087a:	625a      	str	r2, [r3, #36]	; 0x24
    TIM2->CR1 |= CR1_CEN;
 800087c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	6013      	str	r3, [r2, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800

0800089c <uart1_tx_init>:
/* Function Declerations */
void uart1_set_brr(uint32_t periphClk, uint32_t baud);
void uart1_write(int ch);

void uart1_tx_init()
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
    /***** Configure GPIOA PIN9 *****/
    RCC->AHB1ENR |= GPIOAEN;
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <uart1_tx_init+0x68>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a4:	4a17      	ldr	r2, [pc, #92]	; (8000904 <uart1_tx_init+0x68>)
 80008a6:	f043 0301 	orr.w	r3, r3, #1
 80008aa:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOA->MODER |= PIN9_MODE;
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <uart1_tx_init+0x6c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a15      	ldr	r2, [pc, #84]	; (8000908 <uart1_tx_init+0x6c>)
 80008b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008b6:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] |= UART_AF;
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <uart1_tx_init+0x6c>)
 80008ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008bc:	4a12      	ldr	r2, [pc, #72]	; (8000908 <uart1_tx_init+0x6c>)
 80008be:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80008c2:	6253      	str	r3, [r2, #36]	; 0x24

    /***** Configure USART1 *****/
    RCC->APB2ENR |= USART1EN;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <uart1_tx_init+0x68>)
 80008c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c8:	4a0e      	ldr	r2, [pc, #56]	; (8000904 <uart1_tx_init+0x68>)
 80008ca:	f043 0310 	orr.w	r3, r3, #16
 80008ce:	6453      	str	r3, [r2, #68]	; 0x44
    USART1->CR1 &= ~CR1_UE; // disable usart 
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <uart1_tx_init+0x70>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	4a0d      	ldr	r2, [pc, #52]	; (800090c <uart1_tx_init+0x70>)
 80008d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008da:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= CR1_TE; // enable TX
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <uart1_tx_init+0x70>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	4a0a      	ldr	r2, [pc, #40]	; (800090c <uart1_tx_init+0x70>)
 80008e2:	f043 0308 	orr.w	r3, r3, #8
 80008e6:	60d3      	str	r3, [r2, #12]
    uart1_set_brr(APB2CLK, BAUDRATE);
 80008e8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80008ec:	4808      	ldr	r0, [pc, #32]	; (8000910 <uart1_tx_init+0x74>)
 80008ee:	f000 f811 	bl	8000914 <uart1_set_brr>
    USART1->CR1 |= CR1_UE;
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <uart1_tx_init+0x70>)
 80008f4:	68db      	ldr	r3, [r3, #12]
 80008f6:	4a05      	ldr	r2, [pc, #20]	; (800090c <uart1_tx_init+0x70>)
 80008f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008fc:	60d3      	str	r3, [r2, #12]
    
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800
 8000908:	40020000 	.word	0x40020000
 800090c:	40011000 	.word	0x40011000
 8000910:	00f42400 	.word	0x00f42400

08000914 <uart1_set_brr>:
    uart1_write(ch);
    return ch;
}

void uart1_set_brr(uint32_t periphClk, uint32_t baud)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
    uint16_t uartdiv = periphClk / baud;
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	fbb2 f3f3 	udiv	r3, r2, r3
 8000926:	81fb      	strh	r3, [r7, #14]
    USART1->BRR = (((uartdiv / 16) << 4) | (uartdiv % 16));
 8000928:	89fb      	ldrh	r3, [r7, #14]
 800092a:	091b      	lsrs	r3, r3, #4
 800092c:	b29b      	uxth	r3, r3
 800092e:	011a      	lsls	r2, r3, #4
 8000930:	89fb      	ldrh	r3, [r7, #14]
 8000932:	f003 030f 	and.w	r3, r3, #15
 8000936:	431a      	orrs	r2, r3
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <uart1_set_brr+0x34>)
 800093a:	609a      	str	r2, [r3, #8]
}
 800093c:	bf00      	nop
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	40011000 	.word	0x40011000

0800094c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800094c:	480d      	ldr	r0, [pc, #52]	; (8000984 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800094e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000950:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000954:	480c      	ldr	r0, [pc, #48]	; (8000988 <LoopForever+0x6>)
  ldr r1, =_edata
 8000956:	490d      	ldr	r1, [pc, #52]	; (800098c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <LoopForever+0xe>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800095c:	e002      	b.n	8000964 <LoopCopyDataInit>

0800095e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000962:	3304      	adds	r3, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000968:	d3f9      	bcc.n	800095e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <LoopForever+0x12>)
  ldr r4, =_ebss
 800096c:	4c0a      	ldr	r4, [pc, #40]	; (8000998 <LoopForever+0x16>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000970:	e001      	b.n	8000976 <LoopFillZerobss>

08000972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000974:	3204      	adds	r2, #4

08000976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000978:	d3fb      	bcc.n	8000972 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800097a:	f000 f8eb 	bl	8000b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800097e:	f7ff fc67 	bl	8000250 <main>

08000982 <LoopForever>:

LoopForever:
  b LoopForever
 8000982:	e7fe      	b.n	8000982 <LoopForever>
  ldr   r0, =_estack
 8000984:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000990:	08000c58 	.word	0x08000c58
  ldr r2, =_sbss
 8000994:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000998:	200001bc 	.word	0x200001bc

0800099c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC_IRQHandler>
	...

080009a0 <malloc>:
 80009a0:	4b02      	ldr	r3, [pc, #8]	; (80009ac <malloc+0xc>)
 80009a2:	4601      	mov	r1, r0
 80009a4:	6818      	ldr	r0, [r3, #0]
 80009a6:	f000 b82b 	b.w	8000a00 <_malloc_r>
 80009aa:	bf00      	nop
 80009ac:	2000004c 	.word	0x2000004c

080009b0 <free>:
 80009b0:	4b02      	ldr	r3, [pc, #8]	; (80009bc <free+0xc>)
 80009b2:	4601      	mov	r1, r0
 80009b4:	6818      	ldr	r0, [r3, #0]
 80009b6:	f000 b8f3 	b.w	8000ba0 <_free_r>
 80009ba:	bf00      	nop
 80009bc:	2000004c 	.word	0x2000004c

080009c0 <sbrk_aligned>:
 80009c0:	b570      	push	{r4, r5, r6, lr}
 80009c2:	4e0e      	ldr	r6, [pc, #56]	; (80009fc <sbrk_aligned+0x3c>)
 80009c4:	460c      	mov	r4, r1
 80009c6:	6831      	ldr	r1, [r6, #0]
 80009c8:	4605      	mov	r5, r0
 80009ca:	b911      	cbnz	r1, 80009d2 <sbrk_aligned+0x12>
 80009cc:	f000 f8ac 	bl	8000b28 <_sbrk_r>
 80009d0:	6030      	str	r0, [r6, #0]
 80009d2:	4621      	mov	r1, r4
 80009d4:	4628      	mov	r0, r5
 80009d6:	f000 f8a7 	bl	8000b28 <_sbrk_r>
 80009da:	1c43      	adds	r3, r0, #1
 80009dc:	d00a      	beq.n	80009f4 <sbrk_aligned+0x34>
 80009de:	1cc4      	adds	r4, r0, #3
 80009e0:	f024 0403 	bic.w	r4, r4, #3
 80009e4:	42a0      	cmp	r0, r4
 80009e6:	d007      	beq.n	80009f8 <sbrk_aligned+0x38>
 80009e8:	1a21      	subs	r1, r4, r0
 80009ea:	4628      	mov	r0, r5
 80009ec:	f000 f89c 	bl	8000b28 <_sbrk_r>
 80009f0:	3001      	adds	r0, #1
 80009f2:	d101      	bne.n	80009f8 <sbrk_aligned+0x38>
 80009f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80009f8:	4620      	mov	r0, r4
 80009fa:	bd70      	pop	{r4, r5, r6, pc}
 80009fc:	20000078 	.word	0x20000078

08000a00 <_malloc_r>:
 8000a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a04:	1ccd      	adds	r5, r1, #3
 8000a06:	f025 0503 	bic.w	r5, r5, #3
 8000a0a:	3508      	adds	r5, #8
 8000a0c:	2d0c      	cmp	r5, #12
 8000a0e:	bf38      	it	cc
 8000a10:	250c      	movcc	r5, #12
 8000a12:	2d00      	cmp	r5, #0
 8000a14:	4607      	mov	r7, r0
 8000a16:	db01      	blt.n	8000a1c <_malloc_r+0x1c>
 8000a18:	42a9      	cmp	r1, r5
 8000a1a:	d905      	bls.n	8000a28 <_malloc_r+0x28>
 8000a1c:	230c      	movs	r3, #12
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	2600      	movs	r6, #0
 8000a22:	4630      	mov	r0, r6
 8000a24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a28:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000afc <_malloc_r+0xfc>
 8000a2c:	f000 f868 	bl	8000b00 <__malloc_lock>
 8000a30:	f8d8 3000 	ldr.w	r3, [r8]
 8000a34:	461c      	mov	r4, r3
 8000a36:	bb5c      	cbnz	r4, 8000a90 <_malloc_r+0x90>
 8000a38:	4629      	mov	r1, r5
 8000a3a:	4638      	mov	r0, r7
 8000a3c:	f7ff ffc0 	bl	80009c0 <sbrk_aligned>
 8000a40:	1c43      	adds	r3, r0, #1
 8000a42:	4604      	mov	r4, r0
 8000a44:	d155      	bne.n	8000af2 <_malloc_r+0xf2>
 8000a46:	f8d8 4000 	ldr.w	r4, [r8]
 8000a4a:	4626      	mov	r6, r4
 8000a4c:	2e00      	cmp	r6, #0
 8000a4e:	d145      	bne.n	8000adc <_malloc_r+0xdc>
 8000a50:	2c00      	cmp	r4, #0
 8000a52:	d048      	beq.n	8000ae6 <_malloc_r+0xe6>
 8000a54:	6823      	ldr	r3, [r4, #0]
 8000a56:	4631      	mov	r1, r6
 8000a58:	4638      	mov	r0, r7
 8000a5a:	eb04 0903 	add.w	r9, r4, r3
 8000a5e:	f000 f863 	bl	8000b28 <_sbrk_r>
 8000a62:	4581      	cmp	r9, r0
 8000a64:	d13f      	bne.n	8000ae6 <_malloc_r+0xe6>
 8000a66:	6821      	ldr	r1, [r4, #0]
 8000a68:	1a6d      	subs	r5, r5, r1
 8000a6a:	4629      	mov	r1, r5
 8000a6c:	4638      	mov	r0, r7
 8000a6e:	f7ff ffa7 	bl	80009c0 <sbrk_aligned>
 8000a72:	3001      	adds	r0, #1
 8000a74:	d037      	beq.n	8000ae6 <_malloc_r+0xe6>
 8000a76:	6823      	ldr	r3, [r4, #0]
 8000a78:	442b      	add	r3, r5
 8000a7a:	6023      	str	r3, [r4, #0]
 8000a7c:	f8d8 3000 	ldr.w	r3, [r8]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d038      	beq.n	8000af6 <_malloc_r+0xf6>
 8000a84:	685a      	ldr	r2, [r3, #4]
 8000a86:	42a2      	cmp	r2, r4
 8000a88:	d12b      	bne.n	8000ae2 <_malloc_r+0xe2>
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	e00f      	b.n	8000ab0 <_malloc_r+0xb0>
 8000a90:	6822      	ldr	r2, [r4, #0]
 8000a92:	1b52      	subs	r2, r2, r5
 8000a94:	d41f      	bmi.n	8000ad6 <_malloc_r+0xd6>
 8000a96:	2a0b      	cmp	r2, #11
 8000a98:	d917      	bls.n	8000aca <_malloc_r+0xca>
 8000a9a:	1961      	adds	r1, r4, r5
 8000a9c:	42a3      	cmp	r3, r4
 8000a9e:	6025      	str	r5, [r4, #0]
 8000aa0:	bf18      	it	ne
 8000aa2:	6059      	strne	r1, [r3, #4]
 8000aa4:	6863      	ldr	r3, [r4, #4]
 8000aa6:	bf08      	it	eq
 8000aa8:	f8c8 1000 	streq.w	r1, [r8]
 8000aac:	5162      	str	r2, [r4, r5]
 8000aae:	604b      	str	r3, [r1, #4]
 8000ab0:	4638      	mov	r0, r7
 8000ab2:	f104 060b 	add.w	r6, r4, #11
 8000ab6:	f000 f829 	bl	8000b0c <__malloc_unlock>
 8000aba:	f026 0607 	bic.w	r6, r6, #7
 8000abe:	1d23      	adds	r3, r4, #4
 8000ac0:	1af2      	subs	r2, r6, r3
 8000ac2:	d0ae      	beq.n	8000a22 <_malloc_r+0x22>
 8000ac4:	1b9b      	subs	r3, r3, r6
 8000ac6:	50a3      	str	r3, [r4, r2]
 8000ac8:	e7ab      	b.n	8000a22 <_malloc_r+0x22>
 8000aca:	42a3      	cmp	r3, r4
 8000acc:	6862      	ldr	r2, [r4, #4]
 8000ace:	d1dd      	bne.n	8000a8c <_malloc_r+0x8c>
 8000ad0:	f8c8 2000 	str.w	r2, [r8]
 8000ad4:	e7ec      	b.n	8000ab0 <_malloc_r+0xb0>
 8000ad6:	4623      	mov	r3, r4
 8000ad8:	6864      	ldr	r4, [r4, #4]
 8000ada:	e7ac      	b.n	8000a36 <_malloc_r+0x36>
 8000adc:	4634      	mov	r4, r6
 8000ade:	6876      	ldr	r6, [r6, #4]
 8000ae0:	e7b4      	b.n	8000a4c <_malloc_r+0x4c>
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	e7cc      	b.n	8000a80 <_malloc_r+0x80>
 8000ae6:	230c      	movs	r3, #12
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	4638      	mov	r0, r7
 8000aec:	f000 f80e 	bl	8000b0c <__malloc_unlock>
 8000af0:	e797      	b.n	8000a22 <_malloc_r+0x22>
 8000af2:	6025      	str	r5, [r4, #0]
 8000af4:	e7dc      	b.n	8000ab0 <_malloc_r+0xb0>
 8000af6:	605b      	str	r3, [r3, #4]
 8000af8:	deff      	udf	#255	; 0xff
 8000afa:	bf00      	nop
 8000afc:	20000074 	.word	0x20000074

08000b00 <__malloc_lock>:
 8000b00:	4801      	ldr	r0, [pc, #4]	; (8000b08 <__malloc_lock+0x8>)
 8000b02:	f000 b84b 	b.w	8000b9c <__retarget_lock_acquire_recursive>
 8000b06:	bf00      	nop
 8000b08:	200001b4 	.word	0x200001b4

08000b0c <__malloc_unlock>:
 8000b0c:	4801      	ldr	r0, [pc, #4]	; (8000b14 <__malloc_unlock+0x8>)
 8000b0e:	f000 b846 	b.w	8000b9e <__retarget_lock_release_recursive>
 8000b12:	bf00      	nop
 8000b14:	200001b4 	.word	0x200001b4

08000b18 <memset>:
 8000b18:	4402      	add	r2, r0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d100      	bne.n	8000b22 <memset+0xa>
 8000b20:	4770      	bx	lr
 8000b22:	f803 1b01 	strb.w	r1, [r3], #1
 8000b26:	e7f9      	b.n	8000b1c <memset+0x4>

08000b28 <_sbrk_r>:
 8000b28:	b538      	push	{r3, r4, r5, lr}
 8000b2a:	4d06      	ldr	r5, [pc, #24]	; (8000b44 <_sbrk_r+0x1c>)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	4604      	mov	r4, r0
 8000b30:	4608      	mov	r0, r1
 8000b32:	602b      	str	r3, [r5, #0]
 8000b34:	f7ff fe56 	bl	80007e4 <_sbrk>
 8000b38:	1c43      	adds	r3, r0, #1
 8000b3a:	d102      	bne.n	8000b42 <_sbrk_r+0x1a>
 8000b3c:	682b      	ldr	r3, [r5, #0]
 8000b3e:	b103      	cbz	r3, 8000b42 <_sbrk_r+0x1a>
 8000b40:	6023      	str	r3, [r4, #0]
 8000b42:	bd38      	pop	{r3, r4, r5, pc}
 8000b44:	200001b8 	.word	0x200001b8

08000b48 <__errno>:
 8000b48:	4b01      	ldr	r3, [pc, #4]	; (8000b50 <__errno+0x8>)
 8000b4a:	6818      	ldr	r0, [r3, #0]
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	2000004c 	.word	0x2000004c

08000b54 <__libc_init_array>:
 8000b54:	b570      	push	{r4, r5, r6, lr}
 8000b56:	4d0d      	ldr	r5, [pc, #52]	; (8000b8c <__libc_init_array+0x38>)
 8000b58:	4c0d      	ldr	r4, [pc, #52]	; (8000b90 <__libc_init_array+0x3c>)
 8000b5a:	1b64      	subs	r4, r4, r5
 8000b5c:	10a4      	asrs	r4, r4, #2
 8000b5e:	2600      	movs	r6, #0
 8000b60:	42a6      	cmp	r6, r4
 8000b62:	d109      	bne.n	8000b78 <__libc_init_array+0x24>
 8000b64:	4d0b      	ldr	r5, [pc, #44]	; (8000b94 <__libc_init_array+0x40>)
 8000b66:	4c0c      	ldr	r4, [pc, #48]	; (8000b98 <__libc_init_array+0x44>)
 8000b68:	f000 f866 	bl	8000c38 <_init>
 8000b6c:	1b64      	subs	r4, r4, r5
 8000b6e:	10a4      	asrs	r4, r4, #2
 8000b70:	2600      	movs	r6, #0
 8000b72:	42a6      	cmp	r6, r4
 8000b74:	d105      	bne.n	8000b82 <__libc_init_array+0x2e>
 8000b76:	bd70      	pop	{r4, r5, r6, pc}
 8000b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b7c:	4798      	blx	r3
 8000b7e:	3601      	adds	r6, #1
 8000b80:	e7ee      	b.n	8000b60 <__libc_init_array+0xc>
 8000b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b86:	4798      	blx	r3
 8000b88:	3601      	adds	r6, #1
 8000b8a:	e7f2      	b.n	8000b72 <__libc_init_array+0x1e>
 8000b8c:	08000c50 	.word	0x08000c50
 8000b90:	08000c50 	.word	0x08000c50
 8000b94:	08000c50 	.word	0x08000c50
 8000b98:	08000c54 	.word	0x08000c54

08000b9c <__retarget_lock_acquire_recursive>:
 8000b9c:	4770      	bx	lr

08000b9e <__retarget_lock_release_recursive>:
 8000b9e:	4770      	bx	lr

08000ba0 <_free_r>:
 8000ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	d044      	beq.n	8000c30 <_free_r+0x90>
 8000ba6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000baa:	9001      	str	r0, [sp, #4]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f1a1 0404 	sub.w	r4, r1, #4
 8000bb2:	bfb8      	it	lt
 8000bb4:	18e4      	addlt	r4, r4, r3
 8000bb6:	f7ff ffa3 	bl	8000b00 <__malloc_lock>
 8000bba:	4a1e      	ldr	r2, [pc, #120]	; (8000c34 <_free_r+0x94>)
 8000bbc:	9801      	ldr	r0, [sp, #4]
 8000bbe:	6813      	ldr	r3, [r2, #0]
 8000bc0:	b933      	cbnz	r3, 8000bd0 <_free_r+0x30>
 8000bc2:	6063      	str	r3, [r4, #4]
 8000bc4:	6014      	str	r4, [r2, #0]
 8000bc6:	b003      	add	sp, #12
 8000bc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000bcc:	f7ff bf9e 	b.w	8000b0c <__malloc_unlock>
 8000bd0:	42a3      	cmp	r3, r4
 8000bd2:	d908      	bls.n	8000be6 <_free_r+0x46>
 8000bd4:	6825      	ldr	r5, [r4, #0]
 8000bd6:	1961      	adds	r1, r4, r5
 8000bd8:	428b      	cmp	r3, r1
 8000bda:	bf01      	itttt	eq
 8000bdc:	6819      	ldreq	r1, [r3, #0]
 8000bde:	685b      	ldreq	r3, [r3, #4]
 8000be0:	1949      	addeq	r1, r1, r5
 8000be2:	6021      	streq	r1, [r4, #0]
 8000be4:	e7ed      	b.n	8000bc2 <_free_r+0x22>
 8000be6:	461a      	mov	r2, r3
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	b10b      	cbz	r3, 8000bf0 <_free_r+0x50>
 8000bec:	42a3      	cmp	r3, r4
 8000bee:	d9fa      	bls.n	8000be6 <_free_r+0x46>
 8000bf0:	6811      	ldr	r1, [r2, #0]
 8000bf2:	1855      	adds	r5, r2, r1
 8000bf4:	42a5      	cmp	r5, r4
 8000bf6:	d10b      	bne.n	8000c10 <_free_r+0x70>
 8000bf8:	6824      	ldr	r4, [r4, #0]
 8000bfa:	4421      	add	r1, r4
 8000bfc:	1854      	adds	r4, r2, r1
 8000bfe:	42a3      	cmp	r3, r4
 8000c00:	6011      	str	r1, [r2, #0]
 8000c02:	d1e0      	bne.n	8000bc6 <_free_r+0x26>
 8000c04:	681c      	ldr	r4, [r3, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	6053      	str	r3, [r2, #4]
 8000c0a:	440c      	add	r4, r1
 8000c0c:	6014      	str	r4, [r2, #0]
 8000c0e:	e7da      	b.n	8000bc6 <_free_r+0x26>
 8000c10:	d902      	bls.n	8000c18 <_free_r+0x78>
 8000c12:	230c      	movs	r3, #12
 8000c14:	6003      	str	r3, [r0, #0]
 8000c16:	e7d6      	b.n	8000bc6 <_free_r+0x26>
 8000c18:	6825      	ldr	r5, [r4, #0]
 8000c1a:	1961      	adds	r1, r4, r5
 8000c1c:	428b      	cmp	r3, r1
 8000c1e:	bf04      	itt	eq
 8000c20:	6819      	ldreq	r1, [r3, #0]
 8000c22:	685b      	ldreq	r3, [r3, #4]
 8000c24:	6063      	str	r3, [r4, #4]
 8000c26:	bf04      	itt	eq
 8000c28:	1949      	addeq	r1, r1, r5
 8000c2a:	6021      	streq	r1, [r4, #0]
 8000c2c:	6054      	str	r4, [r2, #4]
 8000c2e:	e7ca      	b.n	8000bc6 <_free_r+0x26>
 8000c30:	b003      	add	sp, #12
 8000c32:	bd30      	pop	{r4, r5, pc}
 8000c34:	20000074 	.word	0x20000074

08000c38 <_init>:
 8000c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c3a:	bf00      	nop
 8000c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c3e:	bc08      	pop	{r3}
 8000c40:	469e      	mov	lr, r3
 8000c42:	4770      	bx	lr

08000c44 <_fini>:
 8000c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c46:	bf00      	nop
 8000c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c4a:	bc08      	pop	{r3}
 8000c4c:	469e      	mov	lr, r3
 8000c4e:	4770      	bx	lr
